import{_ as p,r as e,o,c,a as n,b as s,d as i,e as a}from"./app-b86gBwbA.js";const l="/image/image_5Gx6v2URnf.png",u="/image/image_UxOC_68UV8.png",r="/image/image_Yxt9phBaNa.png",k="/image/image_z3OC40oDpp.png",d="/image/image_VGWY3BT0jG.png",v="/image/image_D5QqK7Q3ox.png",m="/image/image_jkAl-Xy9Ge.png",b="/image/image_HpuB1beoEy.png",h="/image/image_sJMV2KZtez.png",g="/image/image_2tGgLWoHXl.png",y={},f=n("div",{class:"custom-container info"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"INFO"),n("p",null,[n("a",{href:"/file/Nachos%E8%8B%B1%E6%96%87%E6%96%87%E6%A1%A3.pdf"},"Nachos英文文档.pdf"),n("br")])],-1),w=a(`<h2 id="一、熟悉nachos" tabindex="-1"><a class="header-anchor" href="#一、熟悉nachos" aria-hidden="true">#</a> 一、熟悉nachos</h2><p>安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-zxf</span> nachos-linux64.tar.gz
<span class="token function">rm</span> nachos-linux64.tar.gz
<span class="token builtin class-name">cd</span> nachos-3.4/
<span class="token builtin class-name">cd</span> code/
<span class="token function">make</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试环境</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> threads/
./nachos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+l+`" alt=""></p><p>写个hello熟悉一下环境</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// hello.cc</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hello.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;system.h&quot;</span></span>

<span class="token keyword">void</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Nachos!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">// hello.h</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HELLO_H</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HELLO_H</span></span>

<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// HELLO_H</span></span>


<span class="token comment">// main.cc</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;hello.h&quot;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">HELLO_H</span></span>
  <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">}</span>


<span class="token comment">// Makefile.common</span>
THREAD_H <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\\
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>threads<span class="token operator">/</span>hello<span class="token punctuation">.</span>h
  
THREAD_C <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\\
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>threads<span class="token operator">/</span>hello<span class="token punctuation">.</span>cc
  
THREAD_O <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> hello<span class="token punctuation">.</span>o

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">make</span> depend
<span class="token function">make</span>
./nachos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+'" alt=""></p><h2 id="二、实现双向有序链表" tabindex="-1"><a class="header-anchor" href="#二、实现双向有序链表" aria-hidden="true">#</a> 二、实现双向有序链表</h2><p>实现双向链表不难，可以参考<code>code/threads</code>目录里的<code>list.cc</code>和<code>list.h</code>，主要是熟悉 UNIX编程环境、make与makefile的用法和c++编程</p>',13),L={href:"http://t.csdnimg.cn/SvuqF",title:"http://t.csdnimg.cn/SvuqF",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,'#include "utility.h"',-1),q=n("code",null,"#include <iostream>",-1),_=a('<p><img src="'+r+`" alt=""></p><p>测试双向链表的<code>main.cc</code>如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#include &lt;iostream&gt;</span>
<span class="token comment">#include &quot;hello.h&quot;</span>
<span class="token comment">#include &quot;dllist.h&quot;</span>
<span class="token comment">#include &quot;utility.h&quot;</span>
<span class="token comment">#include &quot;system.h&quot;</span>


// External functions used by this <span class="token function">file</span>
extern void SortInsertN<span class="token punctuation">(</span>DLList::DLList *L, int n<span class="token punctuation">)</span><span class="token punctuation">;</span>
extern void RemoveN<span class="token punctuation">(</span>DLList::DLList *L, int n<span class="token punctuation">)</span><span class="token punctuation">;</span>


int
main<span class="token punctuation">(</span>int argc, char **argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  DLList *L <span class="token operator">=</span> new DLList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  SortInsertN<span class="token punctuation">(</span>L, <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  RemoveN<span class="token punctuation">(</span>L, <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  return<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试成功</p><p><img src="`+k+`" alt=""></p><h2 id="三、体验nachos线程系统" tabindex="-1"><a class="header-anchor" href="#三、体验nachos线程系统" aria-hidden="true">#</a> 三、体验nachos线程系统</h2><h3 id="阅读源代码-理解nachos现有线程机制" tabindex="-1"><a class="header-anchor" href="#阅读源代码-理解nachos现有线程机制" aria-hidden="true">#</a> 阅读源代码，理解nachos现有线程机制</h3><ol><li><p>code/threads/main.cc</p><p>该模块是整个 Nachos 系统的入口，它分析了 Nachos 的命令行参数，根据不同的选项进行不同功能的初始化设置。</p></li><li><p>code/threads/threadtest.cc 这是一个简单的线程实验的测试用例。用于指导我们如何对线程的修改进行测试的。</p><p>testnum：测试号，对应相应的测试函数。</p><p>SimpleThread()：一个5次循环的程序，每次循环中都让出CPU，让其他就绪的线程执行。</p><p>ThreadTest1()：一个测试方法，创建两个线程，让他们都执行SimpleThread()方法，使这两个线程可以交替执行。</p><p>ThreadTest()：可以看做一个总控程序，根据main函数传过来testnum参数值来执行不同的测试程序。例如，当testnum==1时，就执行ThreadTest1()。</p></li><li><p>code/threads/thread.h</p><p>用于管理线程的数据结构。如线程控制块、线程的基本方法都在这个文件中被定义。</p><p>定义了Nachos线程的四种状态：</p><ul><li><code>JUST_CREATED</code></li><li><code>RUNNING</code></li><li><code>READY</code></li><li><code>BLOCKED</code></li></ul></li><li><p>code/threads/thread.cc 实现了用于管理线程事务的具体方法。主要有一个构造函数和四种操作：Fork 、Finish、Yield、Sleep。</p><p><code>Thread()</code>：构造函数，初始化一个新的Thread。</p><p><code>Fork(VoidFunctionPtr func,int arg):func</code>，新线程运行的函数；分配一块固定大小的内存作为线程的堆栈，在栈顶放入 ThreadRoot 的地址。</p><p><code>Finish()</code>：并不是直接收回线程的数据结构和堆栈，因为我们仍在这个堆栈上运行这个线程。做法是将threadToBeDestroyed的值设为当前线程，使得Scheduler的Run()可以调用销毁程序，当我们这个程序退出上下文时，将其销毁。</p><p><code>Yield()</code>：用于本线程放弃处理机。</p><p><code>Sleep()</code>：可以使当前线程转入阻塞态，并放弃 CPU， 直到被另一个线程唤醒，把它放回就绪线程队列</p></li></ol><h3 id="实现线程并发" tabindex="-1"><a class="header-anchor" href="#实现线程并发" aria-hidden="true">#</a> 实现线程并发</h3><h4 id="测试双向有序链表" tabindex="-1"><a class="header-anchor" href="#测试双向有序链表" aria-hidden="true">#</a> 测试双向有序链表</h4><p>将双向有序链表的测试放进<code>threadtest.cc</code></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">DllistTest0</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment">// 测试双向有序链表</span>
<span class="token punctuation">{</span>
    <span class="token function">DEBUG</span><span class="token punctuation">(</span><span class="token char">&#39;t&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;Entering DllistTest0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SortInsertN</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RemoveN</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span>
<span class="token function">ThreadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>testnum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
        <span class="token function">DllistTest0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;No test specified.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+`" alt=""></p><h4 id="添加参数" tabindex="-1"><a class="header-anchor" href="#添加参数" aria-hidden="true">#</a> 添加参数</h4><p>定义以下参数：</p><table><thead><tr><th>参数标记</th><th>对应变量名</th><th>参数含义</th></tr></thead><tbody><tr><td>-q</td><td>int testnum</td><td>测试编号，用于进入不同的测试分支</td></tr><tr><td>-t</td><td>int threadNum</td><td>创建的并行线程数量</td></tr><tr><td>-n</td><td>int oprNum</td><td>链表插入并删除的节点数量</td></tr></tbody></table><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// threadtest.cc</span>
<span class="token keyword">int</span> testnum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 测试编号</span>
<span class="token keyword">int</span> threadNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 创建的并行线程数量</span>
<span class="token keyword">int</span> oprNum <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 链表插入并删除的节点数量</span>


<span class="token comment">// main.cc</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">THREADS</span></span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> testnum<span class="token punctuation">;</span> <span class="token comment">// 测试编号</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> threadNum<span class="token punctuation">;</span> <span class="token comment">// 创建的并行线程数量</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> oprNum<span class="token punctuation">;</span> <span class="token comment">// 链表插入并删除的节点数量</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

<span class="token keyword">int</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">int</span> argCount<span class="token punctuation">;</span>      <span class="token comment">// the number of arguments for a particular command</span>

  <span class="token function">DEBUG</span><span class="token punctuation">(</span><span class="token char">&#39;t&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;Entering main&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">Initialize</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span>argc<span class="token operator">--</span><span class="token punctuation">,</span> argv<span class="token operator">++</span><span class="token punctuation">;</span> argc <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> argc <span class="token operator">-=</span> argCount<span class="token punctuation">,</span> argv <span class="token operator">+=</span> argCount<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 跳过程序名开始处理参数</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">THREADS</span></span>
    argCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token char">&#39;q&#39;</span><span class="token operator">:</span>
        testnum <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token char">&#39;t&#39;</span><span class="token operator">:</span>
        threadNum <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">case</span> <span class="token char">&#39;n&#39;</span><span class="token operator">:</span>
        oprNum <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token string">&quot;-z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// print copyright</span>
      argCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token function">printf</span> <span class="token punctuation">(</span>copyright<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">THREADS</span></span>
    <span class="token function">ThreadTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>

    currentThread<span class="token operator">-&gt;</span><span class="token function">Finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="添加测试启动函数-类似threadtest1函数" tabindex="-1"><a class="header-anchor" href="#添加测试启动函数-类似threadtest1函数" aria-hidden="true">#</a> 添加测试启动函数（类似ThreadTest1函数）</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// threadtest.cc</span>
<span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&quot;forked thread 0&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&quot;forked thread 1&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&quot;forked thread 2&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&quot;forked thread 3&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&quot;forked thread 4&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&quot;forked thread 5&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&quot;forked thread 6&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&quot;forked thread 7&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&quot;forked thread 8&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&quot;forked thread 9&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&quot;forked thread 10&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">&quot;forked thread 00&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">toDllistTest</span><span class="token punctuation">(</span>VoidFunctionPtr func<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">DEBUG</span><span class="token punctuation">(</span><span class="token char">&#39;t&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;Entering toDllistTest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Thread <span class="token operator">*</span>t<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Thread</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token operator">-&gt;</span><span class="token function">Fork</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="并发可能引起的问题" tabindex="-1"><a class="header-anchor" href="#并发可能引起的问题" aria-hidden="true">#</a> 并发可能引起的问题</h3><h4 id="问题一-共享内存——并行执行时一个线程可能删除-修改其余线程插入的元素" tabindex="-1"><a class="header-anchor" href="#问题一-共享内存——并行执行时一个线程可能删除-修改其余线程插入的元素" aria-hidden="true">#</a> 问题一：共享内存——并行执行时一个线程可能删除／修改其余线程插入的元素</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">DllistTest1</span><span class="token punctuation">(</span><span class="token keyword">int</span> which<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Inserting items in thread %d\\n&quot;</span><span class="token punctuation">,</span> which<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">genItem2List</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> oprNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    currentThread<span class="token operator">-&gt;</span><span class="token function">Yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Removing items in thread %d\\n&quot;</span><span class="token punctuation">,</span> which<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">delItemFromList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> oprNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+`" alt=""></p><p>线程1插入节点→强制切换至线程2→线程2插入节点→切换至线程1→线程1删除节点→由于线程1和线程2共用一个链表，此时线程1删除的节点有可能是线程2插入的节点。</p><h4 id="问题二-覆盖——并行的线程在链表同一个地方插入元素-导致其中一个被覆盖" tabindex="-1"><a class="header-anchor" href="#问题二-覆盖——并行的线程在链表同一个地方插入元素-导致其中一个被覆盖" aria-hidden="true">#</a> 问题二：覆盖——并行的线程在链表同一个地方插入元素，导致其中一个被覆盖</h4><p>测试</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// threadtest.cc</span>
<span class="token keyword">void</span> <span class="token function">DllistTest2</span><span class="token punctuation">(</span><span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 覆盖</span>
    <span class="token function">DEBUG</span><span class="token punctuation">(</span><span class="token char">&#39;t&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;Entering DllistTest2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SortInsertN2</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> oprNum<span class="token punctuation">,</span> which<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// dllist-driver.cc</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">SortInsertN2</span><span class="token punctuation">(</span>DLList<span class="token double-colon punctuation">::</span>DLList <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> seed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        seed <span class="token operator">++</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> seed<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> random <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;which %d insert %d: \\n&quot;</span><span class="token punctuation">,</span> which<span class="token punctuation">,</span> random<span class="token punctuation">)</span><span class="token punctuation">;</span>
        L<span class="token operator">-&gt;</span><span class="token function">SortedInsert2</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> random<span class="token punctuation">,</span> which<span class="token punctuation">)</span><span class="token punctuation">;</span>
        L<span class="token operator">-&gt;</span><span class="token function">printDLL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// dllist.c</span>
<span class="token comment">// 覆盖测试用</span>
<span class="token keyword">void</span>
<span class="token class-name">DLList</span><span class="token double-colon punctuation">::</span><span class="token function">SortedInsert2</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>item<span class="token punctuation">,</span> <span class="token keyword">int</span> sortKey<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DLLElement <span class="token operator">*</span>element <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">DLLElement</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> sortKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    DLLElement <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment">// keep track</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ddlist is empty</span>
        first <span class="token operator">=</span> element<span class="token punctuation">;</span>
        last <span class="token operator">=</span> element<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sortKey <span class="token operator">&lt;</span> first<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Insert to the beginning</span>
        element<span class="token operator">-&gt;</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>
        currentThread<span class="token operator">-&gt;</span><span class="token function">Yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        first<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> element<span class="token punctuation">;</span>
        first <span class="token operator">=</span> element<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// sort from smallest to biggest</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>ptr <span class="token operator">=</span> first<span class="token punctuation">;</span> ptr<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> ptr <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sortKey <span class="token operator">&lt;</span> ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Smaller than the next node, inserted behind the current node</span>
                element<span class="token operator">-&gt;</span>next <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
                currentThread<span class="token operator">-&gt;</span><span class="token function">Yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                element<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> ptr<span class="token punctuation">;</span>
                element<span class="token operator">-&gt;</span>prev<span class="token operator">-&gt;</span>next <span class="token operator">=</span> element<span class="token punctuation">;</span>
                element<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> element<span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// bigger than all nodes, insert in the end</span>
        last<span class="token operator">-&gt;</span>next <span class="token operator">=</span> element<span class="token punctuation">;</span>
        currentThread<span class="token operator">-&gt;</span><span class="token function">Yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        element<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> last<span class="token punctuation">;</span>
        last <span class="token operator">=</span> element<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果</p><p><img src="`+m+`" alt=""></p><p>线程1准备向链表中某一位置插入数据→线程2 准备向链表同一位置插入数据→线程1插入→线程2插入。线程1的插入被线程2的插入覆盖。</p><h4 id="问题三-非法删除——并行的线程准备删除链表中同一个元素-导致段错误" tabindex="-1"><a class="header-anchor" href="#问题三-非法删除——并行的线程准备删除链表中同一个元素-导致段错误" aria-hidden="true">#</a> 问题三：非法删除——并行的线程准备删除链表中同一个元素，导致段错误</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// threadtest.cc</span>
<span class="token keyword">void</span> <span class="token function">DllistTest3</span><span class="token punctuation">(</span><span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 非法删除</span>
    <span class="token function">DEBUG</span><span class="token punctuation">(</span><span class="token char">&#39;t&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;Entering DllistTest3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SortInsertN</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> oprNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">RemoveN2</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> oprNum<span class="token punctuation">,</span> which<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// dllist-driver.cc</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">RemoveN2</span><span class="token punctuation">(</span>DLList<span class="token double-colon punctuation">::</span>DLList <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>keyPtr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-&gt;</span><span class="token function">Remove2</span><span class="token punctuation">(</span>keyPtr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;which %d delete %d: \\n&quot;</span><span class="token punctuation">,</span> which<span class="token punctuation">,</span> <span class="token operator">*</span>keyPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        L<span class="token operator">-&gt;</span><span class="token function">printDLL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// dllist.c</span>
<span class="token comment">// 非法删除测试用</span>
<span class="token keyword">void</span> <span class="token operator">*</span>
<span class="token class-name">DLList</span><span class="token double-colon punctuation">::</span><span class="token function">Remove2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>keyPtr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DLLElement <span class="token operator">*</span>element <span class="token operator">=</span> first<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> last<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// dllist had one item, now has none </span>
        first <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        last <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        first <span class="token operator">=</span> first<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        currentThread<span class="token operator">-&gt;</span><span class="token function">Yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        first<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>keyPtr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token operator">*</span>keyPtr <span class="token operator">=</span> element<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> element<span class="token punctuation">;</span>
    <span class="token keyword">return</span> keyPtr<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+b+`" alt=""></p><p>线程1准备删除链表中的某个数据→线程2准备删除链表中的同一个数据→线程2删除数据→线程1删除数据。线程1访问到野指针或空指针，发生段错误。</p><h4 id="问题四-断链——并行的线程在同一个地方插入元素-导致元素指针发生不一致" tabindex="-1"><a class="header-anchor" href="#问题四-断链——并行的线程在同一个地方插入元素-导致元素指针发生不一致" aria-hidden="true">#</a> 问题四：断链——并行的线程在同一个地方插入元素，导致元素指针发生不一致</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// threadtest.cc</span>
<span class="token keyword">void</span> <span class="token function">DllistTest4</span><span class="token punctuation">(</span><span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 断链测试</span>
    <span class="token function">DEBUG</span><span class="token punctuation">(</span><span class="token char">&#39;t&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;Entering DllistTest4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SortInsertN3</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> oprNum<span class="token punctuation">,</span> which<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// dllist-driver.cc</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">SortInsertN3</span><span class="token punctuation">(</span>DLList<span class="token double-colon punctuation">::</span>DLList <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 断链测试用</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> seed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        seed <span class="token operator">++</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> seed<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> random <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;which %d insert %d: \\n&quot;</span><span class="token punctuation">,</span> which<span class="token punctuation">,</span> random<span class="token punctuation">)</span><span class="token punctuation">;</span>
        L<span class="token operator">-&gt;</span><span class="token function">SortedInsert3</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> random<span class="token punctuation">)</span><span class="token punctuation">;</span>
        L<span class="token operator">-&gt;</span><span class="token function">printDLL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// dllist.c</span>
<span class="token comment">// 断链测试用</span>
<span class="token keyword">void</span>
<span class="token class-name">DLList</span><span class="token double-colon punctuation">::</span><span class="token function">SortedInsert3</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>item<span class="token punctuation">,</span> <span class="token keyword">int</span> sortKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DLLElement <span class="token operator">*</span>element <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">DLLElement</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> sortKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    DLLElement <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment">// keep track</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ddlist is empty</span>
        first <span class="token operator">=</span> element<span class="token punctuation">;</span>
        last <span class="token operator">=</span> element<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sortKey <span class="token operator">&lt;</span> first<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Insert to the beginning</span>
        element<span class="token operator">-&gt;</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>
        currentThread<span class="token operator">-&gt;</span><span class="token function">Yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        first<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> element<span class="token punctuation">;</span>
        first <span class="token operator">=</span> element<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// sort from smallest to biggest</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>ptr <span class="token operator">=</span> first<span class="token punctuation">;</span> ptr<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> ptr <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sortKey <span class="token operator">&lt;</span> ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Smaller than the next node, inserted behind the current node</span>
                element<span class="token operator">-&gt;</span>next <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
                element<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> ptr<span class="token punctuation">;</span>
                element<span class="token operator">-&gt;</span>prev<span class="token operator">-&gt;</span>next <span class="token operator">=</span> element<span class="token punctuation">;</span>
                element<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> element<span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// bigger than all nodes, insert in the end</span>
        last<span class="token operator">-&gt;</span>next <span class="token operator">=</span> element<span class="token punctuation">;</span>
        element<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> last<span class="token punctuation">;</span>
        last <span class="token operator">=</span> element<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+h+`" alt=""></p><p>线程2要往开头（记为开头a）插入数据e1→强制切换至线程1→线程1向开头a插入若干个元素→切回线程2→线程2向开头a插入数据e1。此时线程1在开头a前插入的元素链断了，开头只插入了数据e1。</p><h4 id="问题五-乱序插入——并行的线程在同一个地方插入元素-导致元素位置颠倒-键值大的在前" tabindex="-1"><a class="header-anchor" href="#问题五-乱序插入——并行的线程在同一个地方插入元素-导致元素位置颠倒-键值大的在前" aria-hidden="true">#</a> 问题五：乱序插入——并行的线程在同一个地方插入元素，导致元素位置颠倒，键值大的在前</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// threadtest.cc</span>
<span class="token keyword">void</span> <span class="token function">DllistTest5</span><span class="token punctuation">(</span><span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 断链测试</span>
    <span class="token function">DEBUG</span><span class="token punctuation">(</span><span class="token char">&#39;t&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;Entering DllistTest5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">SortInsertN4</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> oprNum<span class="token punctuation">,</span> which<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// dllist-driver.cc</span>
<span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">SortInsertN4</span><span class="token punctuation">(</span>DLList<span class="token double-colon punctuation">::</span>DLList <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> which<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 乱序插入测试用</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> seed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        seed <span class="token operator">++</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> seed<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> random <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;which %d insert %d: \\n&quot;</span><span class="token punctuation">,</span> which<span class="token punctuation">,</span> random<span class="token punctuation">)</span><span class="token punctuation">;</span>
        L<span class="token operator">-&gt;</span><span class="token function">SortedInsert4</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> random<span class="token punctuation">)</span><span class="token punctuation">;</span>
        L<span class="token operator">-&gt;</span><span class="token function">printDLL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// dllist.c</span>
<span class="token comment">// 乱序插入测试用</span>
<span class="token keyword">void</span>
<span class="token class-name">DLList</span><span class="token double-colon punctuation">::</span><span class="token function">SortedInsert4</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>item<span class="token punctuation">,</span> <span class="token keyword">int</span> sortKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DLLElement <span class="token operator">*</span>element <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">DLLElement</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> sortKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    DLLElement <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span class="token comment">// keep track</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ddlist is empty</span>
        first <span class="token operator">=</span> element<span class="token punctuation">;</span>
        last <span class="token operator">=</span> element<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sortKey <span class="token operator">&lt;</span> first<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Insert to the beginning</span>
        currentThread<span class="token operator">-&gt;</span><span class="token function">Yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        element<span class="token operator">-&gt;</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>
        first<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> element<span class="token punctuation">;</span>
        first <span class="token operator">=</span> element<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// sort from smallest to biggest</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>ptr <span class="token operator">=</span> first<span class="token punctuation">;</span> ptr<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> ptr <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sortKey <span class="token operator">&lt;</span> ptr<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Smaller than the next node, inserted behind the current node</span>
                <span class="token comment">// currentThread-&gt;Yield();</span>
                element<span class="token operator">-&gt;</span>next <span class="token operator">=</span> ptr<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
                element<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> ptr<span class="token punctuation">;</span>
                element<span class="token operator">-&gt;</span>prev<span class="token operator">-&gt;</span>next <span class="token operator">=</span> element<span class="token punctuation">;</span>
                element<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> element<span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// bigger than all nodes, insert in the end</span>
        last<span class="token operator">-&gt;</span>next <span class="token operator">=</span> element<span class="token punctuation">;</span>
        element<span class="token operator">-&gt;</span>prev <span class="token operator">=</span> last<span class="token punctuation">;</span>
        last <span class="token operator">=</span> element<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+g+'" alt=""></p><p>线程2准备插入较大元素e2→强制切换至线程1→线程1在相同位置插入较小元素e1→线程2在元素e1前插入了元素e2。较大元素e2在较小元素e1之前，插入顺序错误。</p>',42);function D(N,T){const t=e("ExternalLinkIcon");return o(),c("div",null,[f,w,n("p",null,[s("这里遇到一个奇怪的报错，解决方法参考链接"),n("a",L,[s("http://t.csdnimg.cn/SvuqF"),i(t)]),s("，在"),x,s("之前要先"),q]),_])}const I=p(y,[["render",D],["__file","nachos_1.html.vue"]]);export{I as default};
