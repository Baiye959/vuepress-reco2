import{_ as h,r as d,o as a,c as s,a as l,d as t,b as e,w as n}from"./app-H4uI4p6H.js";const u={},i={class:"custom-container tip"},_=l("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[l("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[l("circle",{cx:"12",cy:"12",r:"9"}),l("path",{d:"M12 8h.01"}),l("path",{d:"M11 12h1v4h1"})])],-1),r=l("p",{class:"custom-container-title"},"TIP",-1),c=l("p",null,[l("strong",null,"递归三部曲：返回值、参数是什么？终止条件是什么？单层逻辑是什么？")],-1),m=l("br",null,null,-1),g=l("br",null,null,-1),b=l("br",null,null,-1),f=l("br",null,null,-1),E=l("br",null,null,-1),B=l("br",null,null,-1),p=l("br",null,null,-1),x=l("br",null,null,-1),v=l("br",null,null,-1),w=l("br",null,null,-1),k=l("br",null,null,-1),y=l("br",null,null,-1),A=l("br",null,null,-1),D=l("br",null,null,-1),I=l("br",null,null,-1),F=l("br",null,null,-1),N=l("br",null,null,-1),C=l("br",null,null,-1),V=l("br",null,null,-1),L=l("br",null,null,-1),M=l("br",null,null,-1),R=l("br",null,null,-1),T=l("br",null,null,-1),j=l("br",null,null,-1),P=l("br",null,null,-1),q=l("br",null,null,-1),z=l("br",null,null,-1),G=l("br",null,null,-1),H=l("br",null,null,-1),J=l("br",null,null,-1),K=l("br",null,null,-1),O=l("br",null,null,-1),Q=l("br",null,null,-1),S=l("br",null,null,-1),U=l("br",null,null,-1),W=l("br",null,null,-1),X=l("br",null,null,-1),Y=l("br",null,null,-1),Z=l("br",null,null,-1),$=l("br",null,null,-1),ll=l("br",null,null,-1),tl=l("br",null,null,-1),ol=l("br",null,null,-1),el=l("h2",{id:"二叉树的遍历方式",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#二叉树的遍历方式","aria-hidden":"true"},"#"),t(" 二叉树的遍历方式")],-1),nl=l("h2",{id:"求二叉树的属性",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#求二叉树的属性","aria-hidden":"true"},"#"),t(" 求二叉树的属性")],-1),hl=l("h2",{id:"二叉树的修改与构造",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#二叉树的修改与构造","aria-hidden":"true"},"#"),t(" 二叉树的修改与构造")],-1),dl=l("h2",{id:"求二叉搜索树的属性",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#求二叉搜索树的属性","aria-hidden":"true"},"#"),t(" 求二叉搜索树的属性")],-1),al=l("h2",{id:"二叉树公共祖先问题",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#二叉树公共祖先问题","aria-hidden":"true"},"#"),t(" 二叉树公共祖先问题")],-1),sl=l("h2",{id:"二叉搜索树的修改与构造",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#二叉搜索树的修改与构造","aria-hidden":"true"},"#"),t(" 二叉搜索树的修改与构造")],-1);function ul(il,_l){const o=d("RouterLink");return a(),s("div",null,[l("div",i,[_,r,c,l("p",null,[t("前/中/后序遍历"),m,e(o,{to:"/blogs/algorithm/binary_tree_traversal.html"},{default:n(()=>[t("二叉树遍历")]),_:1}),g,e(o,{to:"/blogs/algorithm/leetcode144.html"},{default:n(()=>[t("144.二叉树的前序遍历")]),_:1}),b,e(o,{to:"/blogs/algorithm/leetcode145.html"},{default:n(()=>[t("145.二叉树的后序遍历")]),_:1}),f,e(o,{to:"/blogs/algorithm/leetcode94.html"},{default:n(()=>[t("94.二叉树的中序遍历")]),_:1})]),l("p",null,[t("层序遍历"),E,e(o,{to:"/blogs/algorithm/binary_tree_traversal.html#%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86"},{default:n(()=>[t("层序遍历")]),_:1}),B,e(o,{to:"/blogs/algorithm/leetcode102.html"},{default:n(()=>[t("102.二叉树的层序遍历")]),_:1}),p,e(o,{to:"/blogs/algorithm/leetcode107.html"},{default:n(()=>[t("107.二叉树的层次遍历II")]),_:1}),x,e(o,{to:"/blogs/algorithm/leetcode199.html"},{default:n(()=>[t("199.二叉树的右视图")]),_:1}),v,e(o,{to:"/blogs/algorithm/leetcode637.html"},{default:n(()=>[t("637.二叉树的层平均值")]),_:1}),w,e(o,{to:"/blogs/algorithm/leetcode429.html"},{default:n(()=>[t("429.N叉树的层序遍历")]),_:1}),k,e(o,{to:"/blogs/algorithm/leetcode515.html"},{default:n(()=>[t("515.在每个树行中找最大值")]),_:1}),y,e(o,{to:"/blogs/algorithm/leetcode116.html"},{default:n(()=>[t("116.填充每个节点的下一个右侧节点指针")]),_:1}),A,e(o,{to:"/blogs/algorithm/leetcode117.html"},{default:n(()=>[t("117.填充每个节点的下一个右侧节点指针II")]),_:1}),D,e(o,{to:"/blogs/algorithm/leetcode104.html"},{default:n(()=>[t("104.二叉树的最大深度")]),_:1}),I,e(o,{to:"/blogs/algorithm/leetcode111.html"},{default:n(()=>[t("111.二叉树的最小深度")]),_:1})]),l("p",null,[t("其他"),F,e(o,{to:"/blogs/algorithm/leetcode226.html"},{default:n(()=>[t("226.翻转二叉树")]),_:1}),N,e(o,{to:"/blogs/algorithm/leetcode101.html"},{default:n(()=>[t("101.对称二叉树")]),_:1}),C,e(o,{to:"/blogs/algorithm/leetcode100.html"},{default:n(()=>[t("100.相同的树")]),_:1}),V,e(o,{to:"/blogs/algorithm/leetcode572.html"},{default:n(()=>[t("572.另一个树的子树")]),_:1}),L,e(o,{to:"/blogs/algorithm/leetcode104.html"},{default:n(()=>[t("104.二叉树的最大深度")]),_:1}),M,e(o,{to:"/blogs/algorithm/leetcode559.html"},{default:n(()=>[t("559.n叉树的最大深度")]),_:1}),R,e(o,{to:"/blogs/algorithm/leetcode111.html"},{default:n(()=>[t("111.二叉树的最小深度")]),_:1}),T,e(o,{to:"/blogs/algorithm/leetcode222.html"},{default:n(()=>[t("222.完全二叉树的节点个数")]),_:1}),j,e(o,{to:"/blogs/algorithm/leetcode110.html"},{default:n(()=>[t("110.平衡二叉树")]),_:1}),P,e(o,{to:"/blogs/algorithm/leetcode257.html"},{default:n(()=>[t("257.二叉树的所有路径")]),_:1}),q,e(o,{to:"/blogs/algorithm/leetcode404.html"},{default:n(()=>[t("404.左叶子之和")]),_:1}),z,e(o,{to:"/blogs/algorithm/leetcode513.html"},{default:n(()=>[t("513.找树左下角的值")]),_:1}),G,e(o,{to:"/blogs/algorithm/leetcode112.html"},{default:n(()=>[t("112.路径总和")]),_:1}),H,e(o,{to:"/blogs/algorithm/leetcode113.html"},{default:n(()=>[t("113.路径总和 II")]),_:1}),J,e(o,{to:"/blogs/algorithm/leetcode106.html"},{default:n(()=>[t("106.从中序与后序遍历序列构造二叉树")]),_:1}),K,e(o,{to:"/blogs/algorithm/leetcode105.html"},{default:n(()=>[t("105.从前序与中序遍历序列构造二叉树")]),_:1}),O,e(o,{to:"/blogs/algorithm/leetcode654.html"},{default:n(()=>[t("654.最大二叉树")]),_:1}),Q,e(o,{to:"/blogs/algorithm/leetcode617.html"},{default:n(()=>[t("617.合并二叉树")]),_:1}),S,e(o,{to:"/blogs/algorithm/leetcode700.html"},{default:n(()=>[t("700.二叉搜索树中的搜索")]),_:1}),U,e(o,{to:"/blogs/algorithm/leetcode98.html"},{default:n(()=>[t("98.验证二叉搜索树")]),_:1}),W,e(o,{to:"/blogs/algorithm/leetcode530.html"},{default:n(()=>[t("530.二叉搜索树的最小绝对差")]),_:1}),X,e(o,{to:"/blogs/algorithm/leetcode501.html"},{default:n(()=>[t("501.二叉搜索树中的众数")]),_:1}),Y,e(o,{to:"/blogs/algorithm/leetcode236.html"},{default:n(()=>[t("236.二叉树的最近公共祖先")]),_:1}),Z,e(o,{to:"/blogs/algorithm/leetcode701.html"},{default:n(()=>[t("701.二叉搜索树中的插入操作")]),_:1}),$,e(o,{to:"/blogs/algorithm/leetcode450.html"},{default:n(()=>[t("450.删除二叉搜索树中的节点")]),_:1}),ll,e(o,{to:"/blogs/algorithm/leetcode669.html"},{default:n(()=>[t("669.修剪二叉搜索树")]),_:1}),tl,e(o,{to:"/blogs/algorithm/leetcode108.html"},{default:n(()=>[t("108.将有序数组转换为二叉搜索树")]),_:1}),ol,e(o,{to:"/blogs/algorithm/leetcode538.html"},{default:n(()=>[t("538.把二叉搜索树转换为累加树")]),_:1})])]),el,l("ul",null,[l("li",null,[t("深度优先遍历 "),l("ul",null,[l("li",null,[e(o,{to:"/blogs/algorithm/binary_tree_traversal.html#%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86"},{default:n(()=>[t("前中后序递归法：递归三部曲")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/binary_tree_traversal.html#%E8%BF%AD%E4%BB%A3%E9%81%8D%E5%8E%86"},{default:n(()=>[t("前中后序迭代法：通过栈模拟递归")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/binary_tree_traversal.html#%E7%BB%9F%E4%B8%80%E8%BF%AD%E4%BB%A3%E6%A0%87%E8%AE%B0%E6%B3%95"},{default:n(()=>[t("前中后序迭代法：统一风格")]),_:1})])])]),l("li",null,[t("广度优先遍历 "),l("ul",null,[l("li",null,[e(o,{to:"/blogs/algorithm/binary_tree_traversal.html#%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86"},{default:n(()=>[t("二叉树的层序遍历：通过队列模拟")]),_:1})])])])]),nl,l("ul",null,[l("li",null,[e(o,{to:"/blogs/algorithm/leetcode101.html"},{default:n(()=>[t("是否对称")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode104.html"},{default:n(()=>[t("求最大深度")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode111.html"},{default:n(()=>[t("求最小深度")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode222.html"},{default:n(()=>[t("求有多少个节点")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode110.html"},{default:n(()=>[t("是否平衡")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode257.html"},{default:n(()=>[t("找所有路径")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode404.html"},{default:n(()=>[t("求左叶子之和")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode513.html"},{default:n(()=>[t("求左下角的值")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode112.html"},{default:n(()=>[t("求路径总和")]),_:1})])]),hl,l("ul",null,[l("li",null,[e(o,{to:"/blogs/algorithm/leetcode226.html"},{default:n(()=>[t("翻转二叉树")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode106.html"},{default:n(()=>[t("构造二叉树")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode654.html"},{default:n(()=>[t("构造最大的二叉树")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode617.html"},{default:n(()=>[t("合并两个二叉树")]),_:1})])]),dl,l("ul",null,[l("li",null,[e(o,{to:"/blogs/algorithm/leetcode700.html"},{default:n(()=>[t("二叉搜索树中的搜索")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode98.html"},{default:n(()=>[t("是不是二叉搜索树")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode530.html"},{default:n(()=>[t("求二叉搜索树的最小绝对差")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode501.html"},{default:n(()=>[t("求二叉搜索树的众数")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode538.html"},{default:n(()=>[t("二叉搜索树转成累加树")]),_:1})])]),al,l("ul",null,[l("li",null,[e(o,{to:"/blogs/algorithm/leetcode236.html"},{default:n(()=>[t("二叉树的公共祖先问题")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode235.html"},{default:n(()=>[t("二叉搜索树的公共祖先问题")]),_:1})])]),sl,l("ul",null,[l("li",null,[e(o,{to:"/blogs/algorithm/leetcode701.html"},{default:n(()=>[t("二叉搜索树中的插入操作")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode450.html"},{default:n(()=>[t("二叉搜索树中的删除操作")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode669.html"},{default:n(()=>[t("修剪二叉搜索树")]),_:1})]),l("li",null,[e(o,{to:"/blogs/algorithm/leetcode108.html"},{default:n(()=>[t("构造二叉搜索树")]),_:1})])])])}const cl=h(u,[["render",ul],["__file","7_binary_tree.html.vue"]]);export{cl as default};
