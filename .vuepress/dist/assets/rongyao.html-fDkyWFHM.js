import{_ as t,o as a,c as r,a as e,b as o,e as i}from"./app-cJunwW8o.js";const l={},s=e("div",{class:"custom-container info"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8h.01"}),e("path",{d:"M11 12h1v4h1"})])]),e("p",{class:"custom-container-title"},"INFO"),e("p",null,[o("2024.10.08 18:00~21:00（任选其中的两小时）"),e("br"),o(" 三道程序题（均为模拟题，可以用本地IDE）")])],-1),n=i('<h2 id="第一题" tabindex="-1"><a class="header-anchor" href="#第一题" aria-hidden="true">#</a> 第一题</h2><p>替换多个指定字符，可能存在嵌套、但没有循环引用。</p><p>思路：循环判断是否有代替换字符即可</p><h2 id="第二题" tabindex="-1"><a class="header-anchor" href="#第二题" aria-hidden="true">#</a> 第二题</h2><p>给一个字符串，按规则转换后输出，规则如下：</p><ol><li>&quot;--&quot;为分隔符</li><li>在数字和字母中间的&quot;-&quot;是连线符，如：&quot;21-years&quot;作为一整个单词保留</li><li>其余为非法字符，作为分隔符</li><li>按上述规则转换后将单词逆序</li></ol><blockquote><p>输入：bro stu * old 21-years -an- am--I</p><p>输出：I am an 21-years old stu bro</p></blockquote><p>思路：</p><ol><li>将&quot;--&quot;分隔符替换为空格。</li><li>用StringBuilder存储已转换好的单词、用栈Stack存储已转换好的单词，期间需要三个布尔值辅助：lastIsSpace记录上一个是不是空格、lastIsConnect记录上一个是不是连线符、isFirst记录是不是第一个单词。</li><li>把栈中的单词pop出来，完成单词逆序。</li></ol><h2 id="第三题" tabindex="-1"><a class="header-anchor" href="#第三题" aria-hidden="true">#</a> 第三题</h2><p>给一个十进制的数字。将十进制转化为二进制到十六进制。输出转换后是回文串的所有进制，如果没有则输出-1</p><p>思路：写进制转换函数和判断回文串函数即可</p>',12),c=[s,n];function d(h,p){return a(),r("div",null,c)}const _=t(l,[["render",d],["__file","rongyao.html.vue"]]);export{_ as default};
