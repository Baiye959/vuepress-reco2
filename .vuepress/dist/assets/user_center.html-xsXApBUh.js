import{_ as l,r as i,o,c as p,a as n,b as s,d as e,e as t}from"./app-imBHyMlz.js";const c="/image/image_Oozv6Ek8gz.png",r="/image/image_M5ALcpJgKQ.png",d="/image/image_xApVrsqdA6.png",u="/image/image_XB0yOYZj2f.png",k="/image/image_HWPiiymzkU.png",m="/image/image_EJfVWNUJu0.png",v="/image/image_bZPzEM0Klu.png",h="/image/image_vL6eK6TfCf.png",b={},g=n("h2",{id:"初始化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#初始化","aria-hidden":"true"},"#"),s(" 初始化")],-1),_=n("h3",{id:"后端项目初始化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#后端项目初始化","aria-hidden":"true"},"#"),s(" 后端项目初始化")],-1),y=n("p",null,"springboot官网/IDEA生成初始代码",-1),w=n("p",null,"使用依赖：java web、spring、spring boot、mysql driver、lombok、mybatis、mybatis plus、junit",-1),f={href:"https://baomidou.com/",title:"MyBatis-Plus (baomidou.com)",target:"_blank",rel:"noopener noreferrer"},x={href:"https://mvnrepository.com/",title:"Maven Repository: Search/Browse/Explore (mvnrepository.com)",target:"_blank",rel:"noopener noreferrer"},q=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"此处报错与依赖版本有关，以后添加依赖先去mvn"),n("p",null,[s("报错时mybatis-plus-spring-boot3-starter用的是3.5.4版本，换成最多人用的3.5.5就正常运行了 "),n("img",{src:c,alt:""})])],-1),C=t(`<p>整理目录结构</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├─src
│  ├─main
│  │  ├─java
│  │  │  └─com
│  │  │      └─baiye959
│  │  │          └─usercenter
│  │  │              ├─controller <span class="token comment"># 请求层/控制层：专门处理请求</span>
│  │  │              ├─mapper <span class="token comment"># 数据访问层：专门从数据库中查询数据</span>
│  │  │              ├─model <span class="token comment"># 定义数据表对应模型/用到的封装类</span>
│  │  │              ├─service <span class="token comment"># 编写应用逻辑</span>
│  │  │              └─utils <span class="token comment"># 放工具类</span>
│  │  └─resources
│  └─test
│      └─java
│          └─com
│              └─baiye959
│                  └─usercenter <span class="token comment"># 放测试类</span>
└─target

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据库表设计" tabindex="-1"><a class="header-anchor" href="#数据库表设计" aria-hidden="true">#</a> 数据库表设计</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>id(主键) bigint
username 昵称 varchar
userAccount 登录账号
avatarUrl 头像 varchar
gender 性别 tinyint
userPassword 密码 varchar
phone 电话 varchar
email 邮箱 varchar
userStatus 用户状态 int 0-正常
createTime 创建时间（数据插入时间） datetime
updateTime 更新时间（数据更新时间） datetime
isDelete 是否删除01（逻辑删除） tinyint
userRole 用户角色 0-普通用户1-管理员
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span>
<span class="token punctuation">(</span>
    id <span class="token keyword">bigint</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">comment</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span>
    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;用户昵称&#39;</span><span class="token punctuation">,</span>
    userAccount <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;账号&#39;</span><span class="token punctuation">,</span>
    avatarUrl <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;用户头像&#39;</span><span class="token punctuation">,</span>
    gender <span class="token keyword">tinyint</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;性别&#39;</span><span class="token punctuation">,</span>
    userPassword <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;密码&#39;</span><span class="token punctuation">,</span>
    phone <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;电话&#39;</span><span class="token punctuation">,</span>
    email <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;邮箱&#39;</span><span class="token punctuation">,</span>
    userStatus <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;状态 0 - 正常&#39;</span><span class="token punctuation">,</span>
    createTime <span class="token keyword">datetime</span> <span class="token keyword">default</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>
    updateTime <span class="token keyword">datetime</span> <span class="token keyword">default</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token boolean">null</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">comment</span> <span class="token string">&#39;修改时间&#39;</span><span class="token punctuation">,</span>
    isDelete <span class="token keyword">tinyint</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;是否删除&#39;</span><span class="token punctuation">,</span>
    userRole <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;用户角色 0-默认用户 1-管理员&#39;</span>
<span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;用户&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自动生成器的使用" tabindex="-1"><a class="header-anchor" href="#自动生成器的使用" aria-hidden="true">#</a> 自动生成器的使用</h3><p>MyBatisX插件，自动根据数据库生成：</p><ul><li>domain：实体对象</li><li>mapper：操作数据库的对象</li><li>mapper.xml：定义了mapper对象和数据库的关联，可以在里面自己写SQL</li><li>service：包含常用的增删改查</li><li>serviceImpl：具体实现service</li></ul><p>GenerateAllSetter插件，自动生成所有get方法</p><h2 id="开发功能" tabindex="-1"><a class="header-anchor" href="#开发功能" aria-hidden="true">#</a> 开发功能</h2><h3 id="用户注册" tabindex="-1"><a class="header-anchor" href="#用户注册" aria-hidden="true">#</a> 用户注册</h3><h4 id="注册逻辑" tabindex="-1"><a class="header-anchor" href="#注册逻辑" aria-hidden="true">#</a> 注册逻辑</h4><ol><li>用户在前端输入账户和密码、校验密码</li><li>校验用户输入的信息是否符合要求 <ol><li>非空</li><li>账户长度至少4位，不包含特殊字符，不能重复</li><li>密码长度至少8位</li><li>校验密码和密码相同</li></ol></li><li>对密码进行加密</li><li>向数据库插入用户数据</li></ol>`,13),T=n("li",null,'引入依赖"Apache Commons Lang"，便于校验',-1),A={href:"http://t.csdnimg.cn/qz0Ot",title:"java正则表达式处理特殊字符",target:"_blank",rel:"noopener noreferrer"},R=n("li",null,"这里检查账户是否重复放到最后，省去不必要的查表",-1),S={href:"http://t.csdnimg.cn/3AM03",title:"http://t.csdnimg.cn/3AM03",target:"_blank",rel:"noopener noreferrer"},M=t('<h4 id="单元测试" tabindex="-1"><a class="header-anchor" href="#单元测试" aria-hidden="true">#</a> 单元测试</h4><p>debug（F7进入函数/循环的下一步，F8下一步，F9下一个断点） <img src="'+r+'" alt=""></p><p>此处发现是正则表达式匹配的使用不正确 <img src="'+d+'" alt=""></p><h3 id="用户登录-单机登录" tabindex="-1"><a class="header-anchor" href="#用户登录-单机登录" aria-hidden="true">#</a> 用户登录（单机登录）</h3><h4 id="登录逻辑" tabindex="-1"><a class="header-anchor" href="#登录逻辑" aria-hidden="true">#</a> 登录逻辑</h4><ul><li>接受参数：用户账户、密码</li><li>请求类型：POST <blockquote><p>请求参数很长时不建议用GET，会限制长度</p></blockquote></li><li>请求体：JSON格式的数据（较轻量）</li><li>返回值：用户信息（<strong>脱敏</strong>）</li></ul><ol><li>校验用户账户和密码是否合法 <ol><li>账户长度至少4位，不包含特殊字符</li><li>密码长度至少8位</li></ol></li><li>密码是否正确</li><li>用户信息脱敏，隐藏敏感信息，防止数据库中的字段泄露</li><li>记录用户的登录态（session），存到服务器上（用Spring Boot框架封装的服务器tomcat记录），cookie</li><li>返回脱敏后的用户信息</li></ol><h4 id="登录态管理" tabindex="-1"><a class="header-anchor" href="#登录态管理" aria-hidden="true">#</a> 登录态管理</h4><ol><li><p>连接服务器后，得到一个session1状态，返回给前端</p></li><li><p>登录成功后，得到了登录成功的session，返回给前端一个设置cookie的命令</p><p>session → cookie</p></li><li><p>前端接收到命令，设置cookie，保存到浏览器中</p></li><li><p>前端再次请求后端时（相同的域名），在请求头中带上cookie去请求</p></li><li><p>后端拿到前端传来的cookie，找到对应的session</p></li><li><p>后端从session中可以取出基于该session存储的变量（用户的登录信息、用户名）</p></li></ol><h4 id="逻辑删除" tabindex="-1"><a class="header-anchor" href="#逻辑删除" aria-hidden="true">#</a> 逻辑删除</h4>',10),E={href:"https://baomidou.com/pages/6b03c5",title:"逻辑删除 | MyBatis-Plus",target:"_blank",rel:"noopener noreferrer"},P=n("strong",null,"逻辑删除 | MyBatis-Plus",-1),O=t('<h3 id="用户注销" tabindex="-1"><a class="header-anchor" href="#用户注销" aria-hidden="true">#</a> 用户注销</h3><p>删除登录态</p><h3 id="接口开发" tabindex="-1"><a class="header-anchor" href="#接口开发" aria-hidden="true">#</a> 接口开发</h3><p>控制层Controller封装请求</p><blockquote><p>@RestController适用于编写 restful 风格的api，返回值默认为json类型</p></blockquote><p>controller层倾向于对请求参数本身的校验，不涉及业务逻辑本身（越少越好）</p><p>service层是对业务逻辑的校验（有可能被controller之外的类调用）</p><h4 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化" aria-hidden="true">#</a> 序列化</h4><p><strong>设置序列化ID的原因：</strong></p><p>简单点理解，序列化ID就是对象的身份证号。对于一些对象被序列之后，类的成员发生了改变，反序列之后无法被识别为此类的实例。所以需要序列ID来校验对象，可以在反序列化之后正常的识别使用。</p><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h4><p>IDEA自带的，&quot;Tools&quot;-&quot;HTTP Client&quot;-&quot;Create Request in HTTP Client&quot;</p><p><img src="'+u+'" alt=""><img src="'+k+'" alt=""><img src="'+m+'" alt=""></p><h4 id="用户管理接口-鉴权" tabindex="-1"><a class="header-anchor" href="#用户管理接口-鉴权" aria-hidden="true">#</a> 用户管理接口（鉴权）</h4><p>在user表中加一个userRole（角色）字段</p><ul><li>查询用户 <ul><li>允许根据用户名查询</li></ul></li><li>删除用户</li></ul><h4 id="获取当前登录用户信息接口" tabindex="-1"><a class="header-anchor" href="#获取当前登录用户信息接口" aria-hidden="true">#</a> 获取当前登录用户信息接口</h4><ol><li>通过session获得当前登录用户id</li><li>用id查询数据库，及时更新用户信息</li><li>返回更新并脱敏后的用户信息</li></ol><h3 id="代理" tabindex="-1"><a class="header-anchor" href="#代理" aria-hidden="true">#</a> 代理</h3><ul><li>正向代理：替客户端向服务器发送请求 <img src="'+v+'" alt=""></li><li>反向代理：替服务器接收请求。（有多台服务器分担压力，代理服务器转发请求） <img src="'+h+`" alt=""></li></ul><p>前端使用代理，带/api的路径会自动转到localhost:8080，后端接口要加个/api</p><p><code>application.yml</code>指定接口全局api</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">servlet</span><span class="token punctuation">:</span>
  <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /api
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="后端代码优化" tabindex="-1"><a class="header-anchor" href="#后端代码优化" aria-hidden="true">#</a> 后端代码优化</h2><h3 id="通用反馈对象" tabindex="-1"><a class="header-anchor" href="#通用反馈对象" aria-hidden="true">#</a> 通用反馈对象</h3><p>目的：给对象补充一些信息，告诉前端这个请求在业务层面上是成功还是失败</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;baiye959&quot;</span>
<span class="token punctuation">}</span>

↓

<span class="token comment">// 成功</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 错误码</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;baiye959&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 失败</span>
<span class="token punctuation">{</span>
    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">50001</span><span class="token punctuation">,</span> <span class="token comment">// 错误码</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;用户操作异常，xxx&quot;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⾃定义统⼀的错误码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// 400开头：用户的问题</span>
  <span class="token function">PARAMS_ERROR</span><span class="token punctuation">(</span><span class="token number">40000</span><span class="token punctuation">,</span> <span class="token string">&quot;请求参数错误&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">NULL_ERROR</span><span class="token punctuation">(</span><span class="token number">40001</span><span class="token punctuation">,</span> <span class="token string">&quot;请求数据为空&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">NO_LOGIN</span><span class="token punctuation">(</span><span class="token number">40100</span><span class="token punctuation">,</span> <span class="token string">&quot;未登录&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">NO_AUTH</span><span class="token punctuation">(</span><span class="token number">40101</span><span class="token punctuation">,</span> <span class="token string">&quot;无权限&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// 500开头：系统的问题</span>
  <span class="token function">SYSTEM_ERROR</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">,</span> <span class="token string">&quot;系统内部异常&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回类支持返回正常和错误</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BaseResponse</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span> errorCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>errorCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">T</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span> errorCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">(</span>errorCode<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> errorCode<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> errorCode<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="全局异常处理器" tabindex="-1"><a class="header-anchor" href="#全局异常处理器" aria-hidden="true">#</a> 全局异常处理器</h3><h4 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h4><ol><li>捕获代码中所有的异常，内部消化，让前端得到更详细的业务报错/信息</li><li>同时屏蔽掉项目框架本身的异常（不暴露服务器内部状态）</li><li>集中处理，比如记录日志</li></ol><h4 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h4><ol><li>定义业务异常类 <ol><li>相对于Java的异常类，支持更多字段</li><li>自定义构造函数，更灵活/快捷的设置字段</li></ol></li><li>编写全局异常处理器（利用Spring AOP，在调用方法前后进行额外的处理）</li></ol><h2 id="部署" tabindex="-1"><a class="header-anchor" href="#部署" aria-hidden="true">#</a> 部署</h2><h3 id="多环境" tabindex="-1"><a class="header-anchor" href="#多环境" aria-hidden="true">#</a> 多环境</h3><h4 id="理论" tabindex="-1"><a class="header-anchor" href="#理论" aria-hidden="true">#</a> 理论</h4>`,40),j={href:"http://t.csdnimg.cn/bPWnF",title:"http://t.csdnimg.cn/bPWnF",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>本地开发：localhost(127.0.0.1)</p><p>多环境：指同一套项目代码在不同的阶段需要根据实际情况来调整配置并且部署到不同的机器上。</p><p>为什么需要？</p><ol><li>每个环境互不影响</li><li>区分不同的阶段：开发/测试/生产</li><li>对项目进行优化： <ol><li>本地日志级别</li><li>精简依赖，节省项目体积</li><li>项目的环境/参数可以调整，比如JVM参数</li></ol></li></ol><p>针对不同环境做不同的事情。</p><p>多环境分类：</p><ol><li>本地环境（自己的电脑）localhost</li><li>开发环境（远程开发）大家连同一台机器，为了大家开发方便</li><li>测试环境（测试）开发/测试/产品，单元测试/性能测试/功能测试/系统集成测试，独立的数据库、独立的服务器</li><li>预发布环境（体验服）：和正式环境一致，正式数据库，更严谨，查出更多问题</li><li>正式环境（线上，公开对外访问的项目）：尽量不要改动，保证上线前的代码是“完美”运行</li><li>沙箱环境（实验环境）：为了做实验</li></ol><h4 id="实现-1" tabindex="-1"><a class="header-anchor" href="#实现-1" aria-hidden="true">#</a> 实现</h4><p>SpringBoot项目，通过application.yml添加不同的后缀来区分配置文件</p><p>可以在启动项目时传入环境变量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> <span class="token punctuation">\\</span>user-center-backend-0.0.1-SNAPSHOT.jar <span class="token parameter variable">--spring.profiles.active</span><span class="token operator">=</span>prod
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>需要修改：</p><ul><li>依赖的环境地址 <ul><li>数据库地址</li><li>缓存地址</li><li>消息队列地址</li><li>项目端口号</li></ul></li><li>服务器配置</li></ul><h3 id="docker部署" tabindex="-1"><a class="header-anchor" href="#docker部署" aria-hidden="true">#</a> Docker部署</h3><h4 id="理论-1" tabindex="-1"><a class="header-anchor" href="#理论-1" aria-hidden="true">#</a> 理论</h4><p>docker是容器，可以理解为软件安装包，可以将项目的环境（比如java、nginx）和项目的代码一起打包成镜像，所有人都能下载镜像，更容易分发和移植。再启动项目时，不需要敲一大堆命令，而是直接下载镜像、启动镜像就可以了。</p><p>Docker安装：https://www.docker.com/get-started/ 或者宝塔安装</p>`,17),B=n("br",null,null,-1),D=n("br",null,null,-1),I={href:"https://docs.docker.com/reference/dockerfile/",target:"_blank",rel:"noopener noreferrer"},U=n("br",null,null,-1),L={href:"https://www.runoob.com/docker/docker-dockerfile.html",target:"_blank",rel:"noopener noreferrer"},F=n("p",null,"Dockerfile编写：",-1),H=n("code",null,"FROM",-1),V={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},J=n("li",null,[n("code",null,"NORKDIR"),s("工作目录")],-1),W=n("li",null,[n("code",null,"COPY"),s("从本机复制文件")],-1),z=n("li",null,[n("code",null,"RUN"),s("执行命令")],-1),G=n("li",null,[n("code",null,"CMD/ENTRYPOINT"),s("(附加额外参数)指定运行容器时默认执行的命令")],-1),K=n("h4",{id:"实现-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实现-2","aria-hidden":"true"},"#"),s(" 实现")],-1),Y={href:"https://www.runoob.com/docker/docker-build-command.html",target:"_blank",rel:"noopener noreferrer"},X=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 后端</span>
<span class="token function">docker</span> build <span class="token parameter variable">-t</span> user-center-backend:v0.0.1.
<span class="token comment"># 前端</span>
<span class="token function">docker</span> build <span class="token parameter variable">-t</span> user-center-front:v0.0.1.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>docker run启动：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#前端</span>
<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-d</span> user-center-frontend:V0.0.1
<span class="token comment">#后端</span>
<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 user-center-backend:v0.0.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虚拟化</p><ol><li>端口映射：把本机的资源（实际访问地址）和容器内部的资源（应用启动端口）进行关联</li><li>目录映射：把本机的端口和容器应用的端口进行关联</li></ol><p>常用命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入容器</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> fee2bbb7c9ee /bin/bash

<span class="token comment"># 查看进程</span>
<span class="token function">docker</span> <span class="token function">ps</span>

<span class="token comment"># 查看日志</span>
<span class="token function">docker</span> logs <span class="token parameter variable">-f</span> <span class="token punctuation">[</span>container-id<span class="token punctuation">]</span>

<span class="token comment"># 杀死容器</span>
<span class="token function">docker</span> <span class="token function">kill</span>

<span class="token comment"># 强制删除镜像</span>
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="跨域问题解决-添加跨域头" tabindex="-1"><a class="header-anchor" href="#跨域问题解决-添加跨域头" aria-hidden="true">#</a> 跨域问题解决（添加跨域头）</h3><p>浏览器为了用户的安全，仅允许向同域名、同端口的服务器发送请求。</p><p>这里添加跨域头解决该问题，让服务器告诉浏览器：允许跨域（返回cross-origin-allow响应头） </p>`,10),Z={href:"http://t.csdnimg.cn/UdvZ4",title:"Springboot解决跨域问题方案总结",target:"_blank",rel:"noopener noreferrer"},$=t(`<h4 id="可用方法" tabindex="-1"><a class="header-anchor" href="#可用方法" aria-hidden="true">#</a> 可用方法</h4><ol><li>Spring Boot 中解决跨域 <ol><li>通过注解跨域</li><li>通过配置文件跨域</li><li>通过 CorsFilter 跨域</li><li>通过 Response 跨域</li><li>通过 ResponseBodyAdvice 跨域</li></ol></li><li>Nginx 中解决跨域</li><li>网关中解决跨域 <ol><li>配置文件中设置跨域</li><li>添加 CorsWebFilter 来解决跨域问题</li></ol></li></ol><h4 id="本项目选用的方法-网关支持-nginx" tabindex="-1"><a class="header-anchor" href="#本项目选用的方法-网关支持-nginx" aria-hidden="true">#</a> 本项目选用的方法：网关支持（Nginx）</h4><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token comment">#跨域配置</span>
<span class="token directive"><span class="token keyword">location</span> ^~ /api/</span><span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:8080/api/</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">&#39;Access-Control-Allow-origin&#39;</span> <span class="token variable">$http_origin</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">&#39;Access-Control-Allow-Credentials&#39;</span> <span class="token string">&#39;true&#39;</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Methods <span class="token string">&#39;GET,POST,OPTIONS&#39;</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">add_header</span> Access-Control-Allow-Headers <span class="token string">&#39;*&#39;</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$request_method</span> <span class="token string">&#39;OPTIONS&#39;</span>)</span><span class="token punctuation">{</span>
        <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">&#39;Access-Control-Allow-Credentials&#39;</span> <span class="token string">&#39;true&#39;</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token variable">$http_origin</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">&#39;Access-Control-Allow-Methods&#39;</span> <span class="token string">&#39;GET,POST,OPTIONS&#39;</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">&#39;Access-Control-Allow-Headers&#39;</span> <span class="token string">&#39;DNT,User-Agent,X-Requested-with,If-Modified-since,Cache-Control,Content-Type,Range&#39;</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">&#39;Access-Control-Max-Age&#39;</span> <span class="token number">1728000</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">&#39;Content-Type&#39;</span> <span class="token string">&#39;text/plain;charset=utf-8&#39;</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">&#39;Content-Length&#39;</span> <span class="token number">0</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">return</span> <span class="token number">204</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function Q(nn,sn){const a=i("ExternalLinkIcon");return o(),p("div",null,[g,_,y,w,n("p",null,[n("a",f,[s("MyBatis-Plus (baomidou.com)"),e(a)])]),n("p",null,[n("a",x,[s("Maven Repository: Search/Browse/Explore (mvnrepository.com)"),e(a)])]),q,C,n("ul",null,[T,n("li",null,[s("特殊字符匹配，"),n("a",A,[s("java正则表达式处理特殊字符"),e(a)])]),R,n("li",null,[s("Java常用正则表达式，"),n("a",S,[s("http://t.csdnimg.cn/3AM03"),e(a)])])]),M,n("p",null,[n("a",E,[P,e(a)])]),O,n("p",null,[n("a",j,[s("http://t.csdnimg.cn/bPWnF"),e(a)])]),N,n("p",null,[s("Dockerfile用于指定构建Docker镜像的方法。"),B,s(" Dockerfile一般情况下不需要完全从0自己写，可以去github、gitee等托管平台参考同类项目（比如 springboot）"),D,n("a",I,[s("官方文档"),e(a)]),U,n("a",L,[s("Docker Dockerfile | 菜鸟教程"),e(a)])]),F,n("ul",null,[n("li",null,[H,s("依赖的基础镜像（在"),n("a",V,[s("DockerHub官网"),e(a)]),s("上找）")]),J,W,z,G]),K,n("p",null,[s("根据Dockerfile构建镜像（"),n("a",Y,[s("Docker build 命令 | 菜鸟教程"),e(a)]),s("）：")]),X,n("p",null,[n("a",Z,[s("Springboot解决跨域问题方案总结"),e(a)])]),$])}const en=l(b,[["render",Q],["__file","user_center.html.vue"]]);export{en as default};
