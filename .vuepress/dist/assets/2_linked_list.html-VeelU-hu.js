import{_ as l,r as o,o as i,c,a as n,d as e,w as t,b as s,e as p}from"./app-tAB9lrb1.js";const d="/image/2024031201.png",u={},r={class:"custom-container tip"},m=n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])],-1),h=n("p",{class:"custom-container-title"},"TIP",-1),k=n("p",null,[n("b",null,"考察链表的操作其实就是考察指针的操作")],-1),v=n("br",null,null,-1),_=n("br",null,null,-1),b=n("br",null,null,-1),g=n("br",null,null,-1),f=n("br",null,null,-1),w=n("br",null,null,-1),x=p(`<h2 id="java中的链表定义" tabindex="-1"><a class="header-anchor" href="#java中的链表定义" aria-hidden="true">#</a> Java中的链表定义</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>
    <span class="token comment">// 结点的值</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
    <span class="token comment">// 下一个结点</span>
    <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>

    <span class="token comment">// 节点的构造函数(无参)</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 节点的构造函数(有一个参数)</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 节点的构造函数(有两个参数)</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组和链表的性能分析" tabindex="-1"><a class="header-anchor" href="#数组和链表的性能分析" aria-hidden="true">#</a> 数组和链表的性能分析</h2><p><img src="`+d+'" alt=""></p><p>数组在定义的时候，长度就是固定的，如果想改动数组的长度，就需要重新定义一个新的数组。</p><p>链表的长度可以是不固定的，并且可以动态增删， 适合数据量不固定，频繁增删，较少查询的场景。</p><h2 id="链表经典题目" tabindex="-1"><a class="header-anchor" href="#链表经典题目" aria-hidden="true">#</a> 链表经典题目</h2>',7);function y(N,L){const a=o("RouterLink");return i(),c("div",null,[n("div",r,[m,h,k,n("p",null,[e(a,{to:"/blogs/algorithm/leetcode203.html"},{default:t(()=>[s("203.移除链表元素")]),_:1}),v,e(a,{to:"/blogs/algorithm/leetcode707.html"},{default:t(()=>[s("707.设计链表")]),_:1}),_,e(a,{to:"/blogs/algorithm/leetcode206.html"},{default:t(()=>[s("206.反转链表")]),_:1}),b,e(a,{to:"/blogs/algorithm/leetcode24.html"},{default:t(()=>[s("24. 两两交换链表中的节点")]),_:1}),g,e(a,{to:"/blogs/algorithm/leetcode19.html"},{default:t(()=>[s("19. 删除链表的倒数第N个节点")]),_:1}),f,e(a,{to:"/blogs/algorithm/leetcode160.html"},{default:t(()=>[s("面试题 02.07. 链表相交")]),_:1}),w,e(a,{to:"/blogs/algorithm/leetcode142.html"},{default:t(()=>[s("142. 环形链表II")]),_:1})])]),x,n("ul",null,[n("li",null,[e(a,{to:"/blogs/algorithm/leetcode203.html"},{default:t(()=>[s("203.移除链表元素")]),_:1}),s("：虚拟头节点")]),n("li",null,[e(a,{to:"/blogs/algorithm/leetcode707.html"},{default:t(()=>[s("707.设计链表")]),_:1}),s("：虚拟头节点，链表的基本操作")]),n("li",null,[e(a,{to:"/blogs/algorithm/leetcode206.html"},{default:t(()=>[s("206.反转链表")]),_:1}),s("：虚拟头节点，迭代法、递归法")]),n("li",null,[e(a,{to:"/blogs/algorithm/leetcode24.html"},{default:t(()=>[s("24. 两两交换链表中的节点")]),_:1}),s("：虚拟头节点")]),n("li",null,[e(a,{to:"/blogs/algorithm/leetcode19.html"},{default:t(()=>[s("19. 删除链表的倒数第N个节点")]),_:1}),s("：虚拟头节点，双指针法")]),n("li",null,[e(a,{to:"/blogs/algorithm/leetcode160.html"},{default:t(()=>[s("面试题 02.07. 链表相交")]),_:1}),s("：双指针")]),n("li",null,[e(a,{to:"/blogs/algorithm/leetcode142.html"},{default:t(()=>[s("142. 环形链表II")]),_:1}),s("：双指针")])])])}const I=l(u,[["render",y],["__file","2_linked_list.html.vue"]]);export{I as default};
