import{_ as r,o,c as a,a as e,b as t,e as n}from"./app-PpkNjwdV.js";const s={},c=e("h2",{id:"为什么要有-tcp-ip-网络模型",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#为什么要有-tcp-ip-网络模型","aria-hidden":"true"},"#"),t(" 为什么要有 TCP/IP 网络模型？")],-1),i=e("p",null,"对同一设备的进程间通信，有很多种方式，比如管道、共享内存、信号、消息队列。而对于不同设备的进程间通信，就需要网络通信了。为了兼容各种各样的设备，大家协商了一个统一的网络模型—— TCP/IP 网络模型，这个模型分为很多层，每层有自己的职责。",-1),d=e("h2",{id:"应用层",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#应用层","aria-hidden":"true"},"#"),t(" 应用层")],-1),h=e("p",null,"TCP/IP 网络模型中最上层的是应用层（Application Layer），这也是我们日常能直接接触到的层面。",-1),l=e("p",null,"在应用层，我们构建应用软件、网页等，当两个不同设备的应用需要通信，应用就把应用数据交给下一层——传输层，这样应用层只需专注于应用功能的编写。这就像寄快递一样，我们只需要将快递交给快递员，而不需要知道快递是怎么被运输的，这种特性叫做透明性。",-1),_=e("p",null,"而且应用层是工作在操作系统中的用户态，传输层及以下则工作在内核态。",-1),p=e("div",{class:"custom-container warning"},[e("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[e("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[e("circle",{cx:"12",cy:"12",r:"9"}),e("path",{d:"M12 8v4"}),e("path",{d:"M12 16h.01"})])]),e("p",{class:"custom-container-title"},"WARNING"),e("p",null,"这句不太懂：“应用层是工作在操作系统中的用户态，传输层及以下则工作在内核态。”")],-1),u=n('<h2 id="传输层" tabindex="-1"><a class="header-anchor" href="#传输层" aria-hidden="true">#</a> 传输层</h2><p>应用层的数据会传给传输层，传输层（Trasport Layer）是为应用层提供网络支持的。</p><p>传输层有两个传输协议——TCP和UDP。<br> TCP的全称是传输控制协议（Transmission Control Protocol），大部分应用使用的就是TCP协议，比如HTTP协议。TCP协议比UDP协议多了很多东西，比如流量控制、拥塞控制、超时重传，这些都是为了保证数据报能可靠传输到指定应用。<br> 而UDP全称是用户数据报协议（User Datagram Protocol），从名字就能看出它把重点放在数据报上。UDP非常简单，简单到只负责发送数据报，而不保证它顺利到达，但它实时性更好、传输效率也更高。当然，我们也可以在应用层做一些TCP那样的措施保证UDP的可靠传输，但要做成商用也是很难的。</p><p>应用需要传输的数据包可能很大，如果直接传输就不好控制。因此，我们定义一个TCP最大报文长度——MSS（Maximum Segment Size），如果数据包超过这个长度，就把它分为一段一段的（每段都不超过MSS），把这些分段称为TCP段（TCP Segment）。</p><p>当设备作为数据接收方，设备中可能会有很多应用正在发送或者接收数据，为了把数据传输到指定的应用，需要用编号来区分不同应用，这个编号就是端口号。例如：80端口常用于Web服务器，22端口常用于远程登陆服务器，而浏览器的每个标签页都是一个不同的进程、操作系统会为它们分配临时端口号进行区分。<br> 由于传输层的报文中会携带端口号，接收方可以识别出数据是传输给哪个应用。</p><h2 id="网络层" tabindex="-1"><a class="header-anchor" href="#网络层" aria-hidden="true">#</a> 网络层</h2><p>刚接触传输层时，大家可能会误认为传输层负责将数据从一个设备传给另一个设备，实际上并不是这样。<br> 传输层的设计理念是简单、专注、高效。如果传输层负责将数据从一个设备传给另一个设备，那么就需要经过复杂的网络、在各种各样的结点和路径中进行选择，而我们不希望传输层处理太多的事情，只需要服务好应用即可。<br> 传输层只作为应用间数据传输的媒介，帮助实现应用到应用的通信，而实际的功能则交给下一层——网络层。</p>',7),P=[c,i,d,h,l,_,p,u];function m(T,x){return o(),a("div",null,P)}const C=r(s,[["render",m],["__file","computer_networks_2_1.html.vue"]]);export{C as default};
