import{_ as e,r as o,o as c,c as i,a as n,b as s,d as p,e as t}from"./app-QCOoeKB8.js";const l="/image/image_e5UMT1I2DK.png",u="/image/image_Em8q51hXKO.png",r="/image/image_X_L00m94b2.png",k="/image/image_wOkSf-Sj1b.png",d="/image/image_DfWHr9PFss.png",v="/image/image_Tbc4ctSb5S.png",m="/image/71shots_so_gl5ODLVBd2.png",b="/image/喂食器_pbQdrhvcW1.png",_={},f={class:"custom-container info"},h=n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])],-1),g=n("p",{class:"custom-container-title"},"INFO",-1),y={href:"https://github.com/Baiye959/Cat-Feed",target:"_blank",rel:"noopener noreferrer"},w=t('<h2 id="一、项目简介" tabindex="-1"><a class="header-anchor" href="#一、项目简介" aria-hidden="true">#</a> 一、项目简介</h2><p>使用树莓派打造智能猫咪喂食系统，您可以随时观看猫咪的生活，开启B站直播分享它的可爱瞬间。利用手机应用，您可以远程控制喂食时间和量，确保它们每天都能按时进食。系统还配备自动喂食功能，让您无需亲自在家时刻监督，为猫咪提供充足食物。而当猫粮快用完时，系统会及时提醒您及时补充，确保猫咪不会饿肚子。</p><h2 id="二、项目实现" tabindex="-1"><a class="header-anchor" href="#二、项目实现" aria-hidden="true">#</a> 二、项目实现</h2><h3 id="第一部分-查看猫猫-直播推流" tabindex="-1"><a class="header-anchor" href="#第一部分-查看猫猫-直播推流" aria-hidden="true">#</a> 第一部分：查看猫猫（直播推流）</h3>',4),q=n("p",null,"搭建视频流服务器",-1),x={href:"https://github.com/TareqAlqutami/rtmp-hls-server",title:"TareqAlqutami/rtmp-hls-server: 支持 RTMP、HLS 和 DASH 流的视频流服务器的 Docker 映像",target:"_blank",rel:"noopener noreferrer"},P=n("p",null,"树莓派推流至视频流服务器",-1),O={href:"https://www.bilibili.com/read/cv12692603/",title:"使用 树莓派4b + 官方CSI摄像头 + usb声卡 实现推流直播 - 哔哩哔哩 (bilibili.com)",target:"_blank",rel:"noopener noreferrer"},S={href:"https://cloud.baidu.com/article/3304913",title:"树莓派FFmpeg与RTMP服务器：直播推流实战教程（一） (baidu.com)",target:"_blank",rel:"noopener noreferrer"},I={href:"https://www.bilibili.com/read/cv11094723/",title:"使用树莓派搭建直播平台并推流至B站进行24小时直播（配套文档） - 哔哩哔哩 (bilibili.com)",target:"_blank",rel:"noopener noreferrer"},T=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>raspivid -o - -t 0 -vf -hf -fps 30 -b 6000000 | ffmpeg -re -stream_loop -1 -i &quot;./1.mp3&quot; -f h264 -i - -vcodec copy -acodec aac -b:a 192k -f flv  &quot;rtmp://192.168.177.204:1935&quot;
rtmp://10.30.76.54:1935/livehime
rtmp://192.168.177.204:1935
ffmpeg -f v4l2 -i /dev/video0 -an -flush_packets 1 -c:v libx264 -pix_fmt yuv420p -f flv &quot;rtmp://165.154.221.62:1935/live/test&quot;
ffmpeg -f v4l2 -i /dev/video0 -an -c:v libx264 -pix_fmt yuv420p -f flv &quot;rtmp://10.26.44.75:1935/live/test&quot;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rtmp://165.154.221.62:1935/live/test

<span class="token comment"># 循环推送视频至服务器</span>
ffmpeg <span class="token parameter variable">-re</span>  <span class="token parameter variable">-stream_loop</span> <span class="token parameter variable">-1</span> <span class="token parameter variable">-i</span> /dev/video0 <span class="token parameter variable">-vcodec</span> copy <span class="token parameter variable">-acodec</span> copy <span class="token parameter variable">-f</span> flv <span class="token parameter variable">-y</span> rtmp://10.26.44.75:1935/live/test
ffmpeg <span class="token parameter variable">-re</span>  <span class="token parameter variable">-stream_loop</span> <span class="token parameter variable">-1</span> <span class="token parameter variable">-i</span> <span class="token number">1</span>.mp4 <span class="token parameter variable">-vcodec</span> copy <span class="token parameter variable">-acodec</span> copy <span class="token parameter variable">-f</span> flv <span class="token parameter variable">-y</span> rtmp://10.26.44.75:1935/live/test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),G=t('<li><p>测试直播源是否有效（使用vlc播放）</p><p><img src="'+l+`" alt=""></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rtmp://165.154.221.62:1935/live/test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>手机APP拉流</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// Initialize ExoPlayer
exoPlayer <span class="token operator">=</span> ExoPlayer.Builder<span class="token punctuation">(</span>this<span class="token punctuation">)</span>.build<span class="token punctuation">(</span><span class="token punctuation">)</span>.apply <span class="token punctuation">{</span>
    val dataSourceFactory <span class="token operator">=</span> RtmpDataSource.Factory<span class="token punctuation">(</span><span class="token punctuation">)</span>
    val rtmpMediaSource: MediaSource <span class="token operator">=</span> ProgressiveMediaSource.Factory<span class="token punctuation">(</span>dataSourceFactory<span class="token punctuation">)</span>
        .createMediaSource<span class="token punctuation">(</span>MediaItem.fromUri<span class="token punctuation">(</span><span class="token string">&quot;rtmp://165.154.221.62:1935/live/test&quot;</span><span class="token punctuation">))</span>
    setMediaSource<span class="token punctuation">(</span>rtmpMediaSource<span class="token punctuation">)</span>
    prepare<span class="token punctuation">(</span><span class="token punctuation">)</span>
    playWhenReady <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),A=n("h3",{id:"第二部分-查看猫粮余量-物联网mqtt",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第二部分-查看猫粮余量-物联网mqtt","aria-hidden":"true"},"#"),s(" 第二部分：查看猫粮余量（物联网MQTT）")],-1),C=n("p",null,"（OneNET）物联网开放平台",-1),E=n("p",null,"使用MQTT+数据流",-1),M={href:"https://open.iot.10086.cn/doc/v5/fuse/detail/923",title:"OneNET - 数据流模型数据交互",target:"_blank",rel:"noopener noreferrer"},R={href:"https://open.iot.10086.cn/doc/v5/fuse/detail/919",title:"OneNET - MQTT设备连接",target:"_blank",rel:"noopener noreferrer"},D=t(`<li><p>（树莓派）设备接入 + 发送数据 + 订阅上传成功/失败消息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> paho-mqtt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> paho<span class="token punctuation">.</span>mqtt<span class="token punctuation">.</span>client <span class="token keyword">as</span> mqtt
<span class="token keyword">import</span> time
<span class="token keyword">import</span> random

ServerUrl <span class="token operator">=</span> <span class="token string">&quot;mqtts.heclouds.com&quot;</span> <span class="token comment"># 服务器url</span>
ServerPort <span class="token operator">=</span> <span class="token number">1883</span> <span class="token comment"># 服务器端口</span>
DeviceName<span class="token operator">=</span><span class="token string">&quot;test_pi&quot;</span> <span class="token comment"># 设备ID</span>
Productid <span class="token operator">=</span> <span class="token string">&quot;TRZ54Siy6T&quot;</span> <span class="token comment"># 产品ID</span>
passw <span class="token operator">=</span> <span class="token string">&quot;version=2018-10-31&amp;res=products%2FTRZ54Siy6T%2Fdevices%2Ftest_pi&amp;et=1725379200&amp;method=sha1&amp;sign=5JeKfZPkgE6kC%2BxXT5n%2BCpxEgb0%3D&quot;</span> <span class="token comment"># token</span>

<span class="token comment"># 发布的topic</span>
Pub_topic1 <span class="token operator">=</span> <span class="token string">&quot;$sys/&quot;</span><span class="token operator">+</span>Productid<span class="token operator">+</span><span class="token string">&quot;/&quot;</span><span class="token operator">+</span> DeviceName<span class="token operator">+</span><span class="token string">&quot;/dp/post/json&quot;</span>

<span class="token comment">#需要订阅的topic</span>
<span class="token comment">#数据上传成功的消息</span>
Sub_topic1 <span class="token operator">=</span> <span class="token string">&quot;$sys/&quot;</span><span class="token operator">+</span>Productid<span class="token operator">+</span><span class="token string">&quot;/&quot;</span><span class="token operator">+</span>DeviceName<span class="token operator">+</span><span class="token string">&quot;/dp/post/json/accepted&quot;</span>
<span class="token comment">#接收数据上传失败的消息</span>
Sub_topic2 <span class="token operator">=</span> <span class="token string">&quot;$sys/&quot;</span><span class="token operator">+</span>Productid<span class="token operator">+</span><span class="token string">&quot;/&quot;</span><span class="token operator">+</span>DeviceName<span class="token operator">+</span><span class="token string">&quot;/dp/post/json/rejected&quot;</span>

<span class="token comment">#测试用json数据格式</span>
jsonstr <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;id\\&quot;: 123,\\&quot;dp\\&quot;: {\\&quot;test\\&quot;: [{\\&quot;v\\&quot;: 20}]}}&quot;</span>

<span class="token keyword">def</span> <span class="token function">get_jsonstr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    random_number <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
    ret <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;id\\&quot;: 123,\\&quot;dp\\&quot;: {\\&quot;test\\&quot;: [{\\&quot;v\\&quot;: &quot;</span><span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>random_number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;}]}}&quot;</span>
    <span class="token keyword">return</span> ret


<span class="token keyword">def</span> <span class="token function">on_subscribe</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> userdata<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> reason_code_list<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Since we subscribed only for a single channel, reason_code_list contains</span>
    <span class="token comment"># a single entry</span>
    <span class="token keyword">if</span> reason_code_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>is_failure<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Broker rejected you subscription: </span><span class="token interpolation"><span class="token punctuation">{</span>reason_code_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Broker granted the following QoS: </span><span class="token interpolation"><span class="token punctuation">{</span>reason_code_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">on_unsubscribe</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> userdata<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> reason_code_list<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Be careful, the reason_code_list is only present in MQTTv5.</span>
    <span class="token comment"># In MQTTv3 it will always be empty</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>reason_code_list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> <span class="token keyword">not</span> reason_code_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>is_failure<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;unsubscribe succeeded (if SUBACK is received in MQTTv3 it success)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Broker replied with failure: </span><span class="token interpolation"><span class="token punctuation">{</span>reason_code_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    client<span class="token punctuation">.</span>disconnect<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 当客户端收到来自服务器的CONNACK响应时的回调。也就是申请连接，服务器返回结果是否成功等</span>
<span class="token keyword">def</span> <span class="token function">on_connect</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> userdata<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> reason_code<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> reason_code<span class="token punctuation">.</span>is_failure<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Failed to connect: </span><span class="token interpolation"><span class="token punctuation">{</span>reason_code<span class="token punctuation">}</span></span><span class="token string">. loop_forever() will retry connection&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token comment"># we should always subscribe from on_connect callback to be sure</span>
        <span class="token comment"># our subscribed is persisted across reconnections.</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;连接结果:&quot;</span> <span class="token operator">+</span> mqtt<span class="token punctuation">.</span>connack_string<span class="token punctuation">(</span>reason_code<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">#连接成功后就订阅topic</span>
        client<span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span>Sub_topic1<span class="token punctuation">)</span>
        client<span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span>Sub_topic2<span class="token punctuation">)</span>

<span class="token comment"># 从服务器接收发布消息时的回调。</span>
<span class="token keyword">def</span> <span class="token function">on_message</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> userdata<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>payload<span class="token punctuation">,</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#当消息已经被发送给中间人，on_publish()回调将会被触发</span>
<span class="token keyword">def</span> <span class="token function">on_publish</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> userdata<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>passw<span class="token punctuation">)</span>
    mqttc <span class="token operator">=</span> mqtt<span class="token punctuation">.</span>Client<span class="token punctuation">(</span>mqtt<span class="token punctuation">.</span>CallbackAPIVersion<span class="token punctuation">.</span>VERSION2<span class="token punctuation">,</span>DeviceName<span class="token punctuation">)</span>
    mqttc<span class="token punctuation">.</span>on_connect <span class="token operator">=</span> on_connect
    mqttc<span class="token punctuation">.</span>on_message <span class="token operator">=</span> on_message
    mqttc<span class="token punctuation">.</span>on_subscribe <span class="token operator">=</span> on_subscribe
    mqttc<span class="token punctuation">.</span>on_unsubscribe <span class="token operator">=</span> on_unsubscribe

    mqttc<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>ServerUrl<span class="token punctuation">,</span> port<span class="token operator">=</span>ServerPort<span class="token punctuation">,</span> keepalive<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">)</span>
    mqttc<span class="token punctuation">.</span>username_pw_set<span class="token punctuation">(</span>Productid<span class="token punctuation">,</span>passw<span class="token punctuation">)</span>
    mqttc<span class="token punctuation">.</span>loop_start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        mqttc<span class="token punctuation">.</span>publish<span class="token punctuation">(</span>Pub_topic1<span class="token punctuation">,</span> get_jsonstr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> qos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>树莓派测试成功</p><p><img src="`+u+'" alt=""></p><p><img src="'+r+'" alt=""></p></li>',1),F=n("p",null,"（安卓APP）API请求",-1),N={href:"https://open.iot.10086.cn/doc/v5/fuse/detail/1431",title:"OneNET - 查询设备数据点",target:"_blank",rel:"noopener noreferrer"},B={href:"https://open.iot.10086.cn/doc/v5/fuse/detail/1464",title:"OneNET - 安全鉴权",target:"_blank",rel:"noopener noreferrer"},H=n("h3",{id:"第三部分-自动喂食-树莓派-猫脸识别-控制舵机",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#第三部分-自动喂食-树莓派-猫脸识别-控制舵机","aria-hidden":"true"},"#"),s(" 第三部分：自动喂食（树莓派：猫脸识别+控制舵机）")],-1),j=n("p",null,"树莓派实现功能简述：",-1),U=n("ul",null,[n("li",null,"通过超声波传感器监测猫粮剩余量，推送至OneNET平台"),n("li",null,"通过摄像头检测猫猫的状态，将视频实时推送到视频流服务器"),n("li",null,"检测猫猫是否出现在猫粮机面前，综合猫碗中猫碗高度，通过控制舵机进行投喂")],-1),z=n("p",null,"功能实现：",-1),L=n("h4",{id:"_1、虚拟环境配置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1、虚拟环境配置","aria-hidden":"true"},"#"),s(" 1、虚拟环境配置")],-1),Q={href:"http://t.csdnimg.cn/GMxFo",title:"   http://t.csdnimg.cn/GMxFo",target:"_blank",rel:"noopener noreferrer"},V=t(`<ul><li><p>安装virtualenv和virtualenvwrapper</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> virtualenv
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> virtualenvwrapper

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>配置virtualenvwrapper</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">nano</span> ~/.bashrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下命令行加入到~/.bashrc的最后</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">WORKON_HOME</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/.virtualenvs
<span class="token builtin class-name">source</span> /usr/share/virtualenvwrapper/virtualenvwrapper.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>输入命令运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> ~/.bashrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>新建虚拟环境</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> CodeSpace/2 <span class="token comment"># 切换到想存放虚拟环境的目录</span>
<span class="token function">which</span> python <span class="token comment"># 找一下python目录，这里是/usr/bin/python</span>
virtualenv <span class="token parameter variable">-p</span> /usr/bin/python venv2 <span class="token comment"># venv2是虚拟环境的名字</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+'" alt=""></p><p><img src="'+d+`" alt=""></p></li><li><p>开启虚拟环境</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> /home/baiye959/CodeSpace/2/venv2/bin/activate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+v+`" alt=""></p></li><li><p>常用命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>deactivate <span class="token comment"># 退出虚拟环境</span>
<span class="token function">rm</span> virtualenv 环境名 <span class="token comment"># 删除虚拟环境</span>
pip freeze <span class="token operator">&gt;</span> requirements.txt <span class="token comment"># 导出依赖到requirements.txt文件</span>
pip <span class="token function">install</span> –r requirements.txt <span class="token comment"># 安装requirements.txt文件中的依赖</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2、猫脸识别" tabindex="-1"><a class="header-anchor" href="#_2、猫脸识别" aria-hidden="true">#</a> 2、猫脸识别</h4>`,2),W=t(`<li><p>环境配置</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> pip install opencv<span class="token operator">-</span>python <span class="token operator">-</span>i https:<span class="token comment">//pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn</span>
 pip install flask <span class="token operator">-</span>i https:<span class="token comment">//pypi.tuna.tsinghua.edu.cn/simple --trusted-host pypi.tuna.tsinghua.edu.cn</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1),K=n("p",null,"模型接入",-1),$={href:"https://www.tensorflow.org/lite/examples/object_detection/overview?hl=zh-cn",title:"目标检测  |  TensorFlow Lite",target:"_blank",rel:"noopener noreferrer"},Z=n("li",null,[n("p",null,"识别猫脸"),n("p",null,"识别tag为cat就发起提醒")],-1),X=t(`<h4 id="_3、控制电机" tabindex="-1"><a class="header-anchor" href="#_3、控制电机" aria-hidden="true">#</a> 3、控制电机</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> gpiozero <span class="token keyword">import</span> DistanceSensor
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep
<span class="token keyword">import</span> cv2
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> tflite_runtime<span class="token punctuation">.</span>interpreter <span class="token keyword">as</span> tflite
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
<span class="token keyword">import</span> re
<span class="token keyword">import</span> time
<span class="token keyword">import</span> RPi<span class="token punctuation">.</span>GPIO <span class="token keyword">as</span> GPIO

<span class="token comment"># 设置超声波传感器引脚</span>
sensor <span class="token operator">=</span> DistanceSensor<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token comment"># 本传感器检测喂食器前物体距离</span>
sensor2 <span class="token operator">=</span> DistanceSensor<span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token comment"># 本传感器检测碗中猫粮高度</span>
<span class="token comment"># 设置电机引脚</span>
pin_2 <span class="token operator">=</span> <span class="token number">2</span>
pin_3 <span class="token operator">=</span> <span class="token number">3</span>
pin_17 <span class="token operator">=</span> <span class="token number">17</span>
pin_27 <span class="token operator">=</span> <span class="token number">27</span>
<span class="token comment"># 设置摄像头参数</span>
CAMERA_WIDTH <span class="token operator">=</span> <span class="token number">640</span>
CAMERA_HEIGHT <span class="token operator">=</span> <span class="token number">480</span>


<span class="token comment"># ******************** 此处开始猫脸识别函数 ********************</span>
<span class="token keyword">def</span> <span class="token function">init_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    model_path <span class="token operator">=</span> <span class="token string">&#39;data/detect.tflite&#39;</span>
    label_path <span class="token operator">=</span> <span class="token string">&#39;data/coco_labels.txt&#39;</span>

    cap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    cap<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>CAP_PROP_FRAME_WIDTH<span class="token punctuation">,</span> CAMERA_WIDTH<span class="token punctuation">)</span>
    cap<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>CAP_PROP_FRAME_HEIGHT<span class="token punctuation">,</span> CAMERA_HEIGHT<span class="token punctuation">)</span>
    cap<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>CAP_PROP_FPS<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>

    interpreter <span class="token operator">=</span> load_model<span class="token punctuation">(</span>model_path<span class="token punctuation">)</span>
    labels <span class="token operator">=</span> load_labels<span class="token punctuation">(</span>label_path<span class="token punctuation">)</span>

    input_details <span class="token operator">=</span> interpreter<span class="token punctuation">.</span>get_input_details<span class="token punctuation">(</span><span class="token punctuation">)</span>

    input_shape <span class="token operator">=</span> input_details<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;shape&#39;</span><span class="token punctuation">]</span>
    height <span class="token operator">=</span> input_shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    width <span class="token operator">=</span> input_shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

    input_index <span class="token operator">=</span> input_details<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">]</span>

    <span class="token keyword">return</span> cap<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> interpreter<span class="token punctuation">,</span> input_index<span class="token punctuation">,</span> labels


<span class="token keyword">def</span> <span class="token function">load_labels</span><span class="token punctuation">(</span>label_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>label_path<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        labels <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            m <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r&quot;(\\d+)\\s+(\\w+)&quot;</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            labels<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> labels


<span class="token keyword">def</span> <span class="token function">load_model</span><span class="token punctuation">(</span>model_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    interpreter <span class="token operator">=</span> tflite<span class="token punctuation">.</span>Interpreter<span class="token punctuation">(</span>model_path<span class="token operator">=</span>model_path<span class="token punctuation">)</span>
    interpreter<span class="token punctuation">.</span>allocate_tensors<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> interpreter


<span class="token keyword">def</span> <span class="token function">process_image</span><span class="token punctuation">(</span>interpreter<span class="token punctuation">,</span> image<span class="token punctuation">,</span> input_index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 添加批处理维度</span>
    input_data <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>image<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token comment"># 设置输入张量</span>
    interpreter<span class="token punctuation">.</span>set_tensor<span class="token punctuation">(</span>input_index<span class="token punctuation">,</span> input_data<span class="token punctuation">)</span>
    <span class="token comment"># 运行推理</span>
    interpreter<span class="token punctuation">.</span>invoke<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 获取输出结果张量</span>
    output_details <span class="token operator">=</span> interpreter<span class="token punctuation">.</span>get_output_details<span class="token punctuation">(</span><span class="token punctuation">)</span>
    positions <span class="token operator">=</span> np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>interpreter<span class="token punctuation">.</span>get_tensor<span class="token punctuation">(</span>output_details<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 检测框位置归一化坐标</span>
    classes <span class="token operator">=</span> np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>interpreter<span class="token punctuation">.</span>get_tensor<span class="token punctuation">(</span>output_details<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 检测出的类别标签</span>
    scores <span class="token operator">=</span> np<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span>interpreter<span class="token punctuation">.</span>get_tensor<span class="token punctuation">(</span>output_details<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 检测置信度</span>

    <span class="token comment"># 处理检测结果，若置信度&gt;0.5，则保存对应检测框位置坐标和检测出的类别标签</span>
    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> idx<span class="token punctuation">,</span> score <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> score <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token punctuation">:</span>
            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;pos&#39;</span><span class="token punctuation">:</span> positions<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;_id&#39;</span><span class="token punctuation">:</span> classes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
    

<span class="token comment"># ******************** 此处开始电机控制函数 ********************</span>
<span class="token comment"># 初始化电机引脚</span>
<span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    GPIO<span class="token punctuation">.</span>setmode<span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>  <span class="token comment"># 设置引脚的编码方式</span>
    GPIO<span class="token punctuation">.</span>setwarnings<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>pin_2<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>
    GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>pin_3<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>
    GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>pin_17<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>
    GPIO<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>pin_27<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>

<span class="token comment"># 控制电机</span>
<span class="token keyword">def</span> <span class="token function">setStep</span><span class="token punctuation">(</span>w1<span class="token punctuation">,</span> w2<span class="token punctuation">,</span> w3<span class="token punctuation">,</span> w4<span class="token punctuation">)</span><span class="token punctuation">:</span>
    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>pin_2<span class="token punctuation">,</span> w1<span class="token punctuation">)</span>
    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>pin_3<span class="token punctuation">,</span> w2<span class="token punctuation">)</span>
    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>pin_17<span class="token punctuation">,</span> w3<span class="token punctuation">)</span>
    GPIO<span class="token punctuation">.</span>output<span class="token punctuation">(</span>pin_27<span class="token punctuation">,</span> w4<span class="token punctuation">)</span>

<span class="token comment"># 控制电机正转</span>
<span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">:</span>
    setStep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
    setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
    setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
    setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>

<span class="token comment"># 控制电机反转</span>
<span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">:</span>
    setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
    setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
    setStep<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
    setStep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>delay<span class="token punctuation">)</span>

<span class="token comment"># 喂食（电机动作：正转90度，延时1秒，反转90度）</span>
<span class="token keyword">def</span> <span class="token function">dianji</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    delay <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment"># 延时 2ms</span>
    
    init<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
        backward<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        forward<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">)</span>

    GPIO<span class="token punctuation">.</span>cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment"># ******************** 此处开始主函数 ********************</span>
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    cap<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> interpreter<span class="token punctuation">,</span> input_index<span class="token punctuation">,</span> labels <span class="token operator">=</span> init_model<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        distance <span class="token operator">=</span> sensor<span class="token punctuation">.</span>distance <span class="token operator">*</span> <span class="token number">100</span>  <span class="token comment"># 转换为厘米</span>
        <span class="token keyword">if</span> distance <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">:</span>  <span class="token comment"># 物体在20cm以内被检测到</span>
            
            <span class="token comment"># 检测到物体后开启摄像头</span>
            ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
            image <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2RGB<span class="token punctuation">)</span><span class="token punctuation">)</span>
            image <span class="token operator">=</span> image<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment"># 模型推测</span>
            top_result <span class="token operator">=</span> process_image<span class="token punctuation">(</span>interpreter<span class="token punctuation">,</span> image<span class="token punctuation">,</span> input_index<span class="token punctuation">)</span>
            <span class="token comment"># 判断是否检测到猫，标签中是否出现&quot;cat&quot;</span>
            pedestrian_detected <span class="token operator">=</span> <span class="token builtin">any</span><span class="token punctuation">(</span>labels<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">&#39;_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;cat&#39;</span> <span class="token keyword">for</span> obj <span class="token keyword">in</span> top_result<span class="token punctuation">)</span>
            <span class="token comment"># 若检测到猫，则判断是否应该喂食</span>
            <span class="token keyword">if</span> pedestrian_detected<span class="token punctuation">:</span>
                <span class="token comment"># 此处根据碗中猫粮高度判断是否要喂食</span>
                distance2 <span class="token operator">=</span> sensor2<span class="token punctuation">.</span>distance <span class="token operator">*</span> <span class="token number">100</span>  <span class="token comment"># 转换为厘米</span>
                <span class="token keyword">if</span> distance2 <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">:</span>
                    dianji<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># 若周围没有检测到物体</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

        key <span class="token operator">=</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span>  <span class="token comment"># 按下Esc键退出</span>
            <span class="token keyword">break</span>
    
    cap<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># cv2.destroyAllWindows()</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、项目展示" tabindex="-1"><a class="header-anchor" href="#三、项目展示" aria-hidden="true">#</a> 三、项目展示</h2><h3 id="手机app" tabindex="-1"><a class="header-anchor" href="#手机app" aria-hidden="true">#</a> 手机APP</h3>`,4),J={href:"https://github.com/Baiye959/Cat-Feed",title:"Baiye959/Cat-Feed (github.com)",target:"_blank",rel:"noopener noreferrer"},Y=t('<p><img src="'+m+'" alt=""></p><p>手机APP功能简述：</p><ul><li>通过视频的方式，实时查看喂食机面前猫情况</li><li>显示猫粮剩余量</li><li>手机端提醒喂食机中猫粮储备量不足</li></ul><h3 id="喂食机-树莓派" tabindex="-1"><a class="header-anchor" href="#喂食机-树莓派" aria-hidden="true">#</a> 喂食机（树莓派）</h3><p><img src="'+b+`" alt=""></p><ul><li>test4.py</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>import paho<span class="token punctuation">.</span>mqtt<span class="token punctuation">.</span>client as mqtt
import time
import random
from gpiozero import DistanceSensor


sensor <span class="token operator">=</span> <span class="token function">DistanceSensor</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span> # 本传感器检测与瓶中猫粮的距离
ServerUrl <span class="token operator">=</span> <span class="token string">&quot;mqtts.heclouds.com&quot;</span> # 服务器url
ServerPort <span class="token operator">=</span> <span class="token number">1883</span> # 服务器端口
DeviceName<span class="token operator">=</span><span class="token string">&quot;test_pi&quot;</span> # 设备ID
Productid <span class="token operator">=</span> <span class="token string">&quot;TRZ54Siy6T&quot;</span> # 产品ID
passw <span class="token operator">=</span> <span class="token string">&quot;version=2018-10-31&amp;res=products%2FTRZ54Siy6T%2Fdevices%2Ftest_pi&amp;et=1725379200&amp;method=sha1&amp;sign=5JeKfZPkgE6kC%2BxXT5n%2BCpxEgb0%3D&quot;</span> # token

# 发布的topic
Pub_topic1 <span class="token operator">=</span> <span class="token string">&quot;$sys/&quot;</span><span class="token operator">+</span>Productid<span class="token operator">+</span><span class="token string">&quot;/&quot;</span><span class="token operator">+</span> DeviceName<span class="token operator">+</span><span class="token string">&quot;/dp/post/json&quot;</span>

#需要订阅的topic
#数据上传成功的消息
Sub_topic1 <span class="token operator">=</span> <span class="token string">&quot;$sys/&quot;</span><span class="token operator">+</span>Productid<span class="token operator">+</span><span class="token string">&quot;/&quot;</span><span class="token operator">+</span>DeviceName<span class="token operator">+</span><span class="token string">&quot;/dp/post/json/accepted&quot;</span>
#接收数据上传失败的消息
Sub_topic2 <span class="token operator">=</span> <span class="token string">&quot;$sys/&quot;</span><span class="token operator">+</span>Productid<span class="token operator">+</span><span class="token string">&quot;/&quot;</span><span class="token operator">+</span>DeviceName<span class="token operator">+</span><span class="token string">&quot;/dp/post/json/rejected&quot;</span>

#测试用json数据格式
jsonstr <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;id\\&quot;: 123,\\&quot;dp\\&quot;: {\\&quot;test\\&quot;: [{\\&quot;v\\&quot;: 20}]}}&quot;</span>

def <span class="token function">get_jsonstr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">random</span><span class="token expression">_number <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">randint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span></span></span>
    distance <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>sensor<span class="token punctuation">.</span>distance <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span>  # 转换为厘米
    remainHeight <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">-</span> distance
    <span class="token keyword">if</span> remainHeight <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token operator">:</span>
        remainHeight <span class="token operator">=</span> <span class="token number">0</span>
    ret <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;id\\&quot;: 123,\\&quot;dp\\&quot;: {\\&quot;test\\&quot;: [{\\&quot;v\\&quot;: &quot;</span><span class="token operator">+</span> <span class="token function">str</span><span class="token punctuation">(</span>remainHeight<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;}]}}&quot;</span>
    <span class="token keyword">return</span> ret


def <span class="token function">on_subscribe</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> userdata<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> reason_code_list<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Since we subscribed only <span class="token keyword">for</span> a single channel<span class="token punctuation">,</span> reason_code_list contains</span></span>
    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">a</span> <span class="token expression">single entry</span></span>
    <span class="token keyword">if</span> reason_code_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>is_failure<span class="token operator">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span>f<span class="token string">&quot;Broker rejected you subscription: {reason_code_list[0]}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token operator">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span>f<span class="token string">&quot;Broker granted the following QoS: {reason_code_list[0].value}&quot;</span><span class="token punctuation">)</span>


def <span class="token function">on_unsubscribe</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> userdata<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> reason_code_list<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Be careful<span class="token punctuation">,</span> the reason_code_list is only present in MQTTv5<span class="token punctuation">.</span></span></span>
    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">In MQTTv3 it will always be empty</span></span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>reason_code_list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> or not reason_code_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>is_failure<span class="token operator">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;unsubscribe succeeded (if SUBACK is received in MQTTv3 it success)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token operator">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span>f<span class="token string">&quot;Broker replied with failure: {reason_code_list[0]}&quot;</span><span class="token punctuation">)</span>
    client<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

# 当客户端收到来自服务器的CONNACK响应时的回调。也就是申请连接，服务器返回结果是否成功等
def <span class="token function">on_connect</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> userdata<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> reason_code<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token keyword">if</span> reason_code<span class="token punctuation">.</span>is_failure<span class="token operator">:</span>
        <span class="token function">print</span><span class="token punctuation">(</span>f<span class="token string">&quot;Failed to connect: {reason_code}. loop_forever() will retry connection&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token operator">:</span>
        <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">we</span> <span class="token expression">should always subscribe from on_connect callback to be sure</span></span>
        <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">our</span> <span class="token expression">subscribed is persisted across reconnections<span class="token punctuation">.</span></span></span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;连接结果:&quot;</span> <span class="token operator">+</span> mqtt<span class="token punctuation">.</span><span class="token function">connack_string</span><span class="token punctuation">(</span>reason_code<span class="token punctuation">)</span><span class="token punctuation">)</span>
        #连接成功后就订阅topic
        client<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>Sub_topic1<span class="token punctuation">)</span>
        client<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>Sub_topic2<span class="token punctuation">)</span>

# 从服务器接收发布消息时的回调。
def <span class="token function">on_message</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> userdata<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">str</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>payload<span class="token punctuation">,</span><span class="token char">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

#当消息已经被发送给中间人，<span class="token function">on_publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span>回调将会被触发
def <span class="token function">on_publish</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> userdata<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">str</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>

def <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token function">print</span><span class="token punctuation">(</span>passw<span class="token punctuation">)</span>
    mqttc <span class="token operator">=</span> mqtt<span class="token punctuation">.</span><span class="token function">Client</span><span class="token punctuation">(</span>mqtt<span class="token punctuation">.</span>CallbackAPIVersion<span class="token punctuation">.</span>VERSION2<span class="token punctuation">,</span>DeviceName<span class="token punctuation">)</span>
    mqttc<span class="token punctuation">.</span>on_connect <span class="token operator">=</span> on_connect
    mqttc<span class="token punctuation">.</span>on_message <span class="token operator">=</span> on_message
    mqttc<span class="token punctuation">.</span>on_subscribe <span class="token operator">=</span> on_subscribe
    mqttc<span class="token punctuation">.</span>on_unsubscribe <span class="token operator">=</span> on_unsubscribe

    mqttc<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>ServerUrl<span class="token punctuation">,</span> port<span class="token operator">=</span>ServerPort<span class="token punctuation">,</span> keepalive<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">)</span>
    mqttc<span class="token punctuation">.</span><span class="token function">username_pw_set</span><span class="token punctuation">(</span>Productid<span class="token punctuation">,</span>passw<span class="token punctuation">)</span>
    mqttc<span class="token punctuation">.</span><span class="token function">loop_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span>
        mqttc<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>Pub_topic1<span class="token punctuation">,</span> <span class="token function">get_jsonstr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> qos<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token char">&#39;__main__&#39;</span><span class="token operator">:</span>
    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>detect.py</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>from gpiozero import DistanceSensor
import cv2
import numpy as np
import tflite_runtime<span class="token punctuation">.</span>interpreter as tflite
from PIL import Image
import re
import time
import RPi<span class="token punctuation">.</span>GPIO as GPIO

# 设置超声波传感器引脚
sensor2 <span class="token operator">=</span> <span class="token function">DistanceSensor</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span> # 本传感器检测碗中猫粮高度
# 设置电机引脚
pin_2 <span class="token operator">=</span> <span class="token number">2</span>
pin_3 <span class="token operator">=</span> <span class="token number">3</span>
pin_17 <span class="token operator">=</span> <span class="token number">17</span>
pin_27 <span class="token operator">=</span> <span class="token number">27</span>
# 设置摄像头参数
CAMERA_WIDTH <span class="token operator">=</span> <span class="token number">640</span>
CAMERA_HEIGHT <span class="token operator">=</span> <span class="token number">480</span>


# <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> 此处为测试函数 <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">def</span> <span class="token expression"><span class="token function">sensor1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span>     <span class="token directive keyword">while</span> <span class="token expression"><span class="token number">1</span><span class="token operator">:</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span>         <span class="token directive keyword">distance</span><span class="token expression"><span class="token number">2</span> <span class="token operator">=</span> sensor2<span class="token punctuation">.</span>distance <span class="token operator">*</span> <span class="token number">100</span>  # 转换为厘米</span></span>
<span class="token macro property"><span class="token directive-hash">#</span>         <span class="token directive keyword">print</span><span class="token expression"><span class="token punctuation">(</span>distance2<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span>         <span class="token directive keyword">time</span><span class="token expression"><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">sensor</span><span class="token expression"><span class="token number">1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>


# <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> 此处开始猫脸识别函数 <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
def <span class="token function">init_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>
    model_path <span class="token operator">=</span> <span class="token char">&#39;data/detect.tflite&#39;</span>
    label_path <span class="token operator">=</span> <span class="token char">&#39;data/coco_labels.txt&#39;</span>

    cap <span class="token operator">=</span> cv2<span class="token punctuation">.</span><span class="token function">VideoCapture</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    cap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>CAP_PROP_FRAME_WIDTH<span class="token punctuation">,</span> CAMERA_WIDTH<span class="token punctuation">)</span>
    cap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>CAP_PROP_FRAME_HEIGHT<span class="token punctuation">,</span> CAMERA_HEIGHT<span class="token punctuation">)</span>
    cap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>CAP_PROP_FPS<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span>

    interpreter <span class="token operator">=</span> <span class="token function">load_model</span><span class="token punctuation">(</span>model_path<span class="token punctuation">)</span>
    labels <span class="token operator">=</span> <span class="token function">load_labels</span><span class="token punctuation">(</span>label_path<span class="token punctuation">)</span>

    input_details <span class="token operator">=</span> interpreter<span class="token punctuation">.</span><span class="token function">get_input_details</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    input_shape <span class="token operator">=</span> input_details<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">&#39;shape&#39;</span><span class="token punctuation">]</span>
    height <span class="token operator">=</span> input_shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    width <span class="token operator">=</span> input_shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

    input_index <span class="token operator">=</span> input_details<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">&#39;index&#39;</span><span class="token punctuation">]</span>

    <span class="token keyword">return</span> cap<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> interpreter<span class="token punctuation">,</span> input_index<span class="token punctuation">,</span> labels


def <span class="token function">load_labels</span><span class="token punctuation">(</span>label_path<span class="token punctuation">)</span><span class="token operator">:</span>
    with <span class="token function">open</span><span class="token punctuation">(</span>label_path<span class="token punctuation">)</span> as f<span class="token operator">:</span>
        labels <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token keyword">for</span> line in f<span class="token punctuation">.</span><span class="token function">readlines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>
            m <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>r<span class="token string">&quot;(\\d+)\\s+(\\w+)&quot;</span><span class="token punctuation">,</span> line<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            labels<span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> labels


def <span class="token function">load_model</span><span class="token punctuation">(</span>model_path<span class="token punctuation">)</span><span class="token operator">:</span>
    interpreter <span class="token operator">=</span> tflite<span class="token punctuation">.</span><span class="token function">Interpreter</span><span class="token punctuation">(</span>model_path<span class="token operator">=</span>model_path<span class="token punctuation">)</span>
    interpreter<span class="token punctuation">.</span><span class="token function">allocate_tensors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> interpreter


def <span class="token function">process_image</span><span class="token punctuation">(</span>interpreter<span class="token punctuation">,</span> image<span class="token punctuation">,</span> input_index<span class="token punctuation">)</span><span class="token operator">:</span>
    # 添加批处理维度
    input_data <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token function">expand_dims</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    # 设置输入张量
    interpreter<span class="token punctuation">.</span><span class="token function">set_tensor</span><span class="token punctuation">(</span>input_index<span class="token punctuation">,</span> input_data<span class="token punctuation">)</span>
    # 运行推理
    interpreter<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    # 获取输出结果张量
    output_details <span class="token operator">=</span> interpreter<span class="token punctuation">.</span><span class="token function">get_output_details</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    positions <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token function">squeeze</span><span class="token punctuation">(</span>interpreter<span class="token punctuation">.</span><span class="token function">get_tensor</span><span class="token punctuation">(</span>output_details<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">&#39;index&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   # 检测框位置归一化坐标
    classes <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token function">squeeze</span><span class="token punctuation">(</span>interpreter<span class="token punctuation">.</span><span class="token function">get_tensor</span><span class="token punctuation">(</span>output_details<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">&#39;index&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   # 检测出的类别标签
    scores <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token function">squeeze</span><span class="token punctuation">(</span>interpreter<span class="token punctuation">.</span><span class="token function">get_tensor</span><span class="token punctuation">(</span>output_details<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token char">&#39;index&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   # 检测置信度

    # 处理检测结果，若置信度<span class="token operator">&gt;</span><span class="token number">0.5</span>，则保存对应检测框位置坐标和检测出的类别标签
    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> idx<span class="token punctuation">,</span> score in <span class="token function">enumerate</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token keyword">if</span> score <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token operator">:</span>
            result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token char">&#39;pos&#39;</span><span class="token operator">:</span> positions<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token char">&#39;_id&#39;</span><span class="token operator">:</span> classes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> result


# <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> 此处开始电机控制函数 <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
# 初始化电机引脚
def <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>
    GPIO<span class="token punctuation">.</span><span class="token function">setmode</span><span class="token punctuation">(</span>GPIO<span class="token punctuation">.</span>BCM<span class="token punctuation">)</span>  # 设置引脚的编码方式
    GPIO<span class="token punctuation">.</span><span class="token function">setwarnings</span><span class="token punctuation">(</span>False<span class="token punctuation">)</span>
    GPIO<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span>pin_2<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>
    GPIO<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span>pin_3<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>
    GPIO<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span>pin_17<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>
    GPIO<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span>pin_27<span class="token punctuation">,</span> GPIO<span class="token punctuation">.</span>OUT<span class="token punctuation">)</span>

# 控制电机
def <span class="token function">setStep</span><span class="token punctuation">(</span>w1<span class="token punctuation">,</span> w2<span class="token punctuation">,</span> w3<span class="token punctuation">,</span> w4<span class="token punctuation">)</span><span class="token operator">:</span>
    GPIO<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span>pin_2<span class="token punctuation">,</span> w1<span class="token punctuation">)</span>
    GPIO<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span>pin_3<span class="token punctuation">,</span> w2<span class="token punctuation">)</span>
    GPIO<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span>pin_17<span class="token punctuation">,</span> w3<span class="token punctuation">)</span>
    GPIO<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span>pin_27<span class="token punctuation">,</span> w4<span class="token punctuation">)</span>

# 控制电机正转
def <span class="token function">forward</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token function">setStep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
    <span class="token function">setStep</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
    <span class="token function">setStep</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
    <span class="token function">setStep</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span>

# 控制电机反转
def <span class="token function">backward</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token function">setStep</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
    <span class="token function">setStep</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
    <span class="token function">setStep</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span>
    <span class="token function">setStep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span>

# 喂食（电机动作：正转<span class="token number">5</span>秒，延时<span class="token number">1</span>秒，反转<span class="token number">5</span>秒）
def <span class="token function">dianji</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>
    delay <span class="token operator">=</span> <span class="token number">2</span>  # 延时 <span class="token number">2</span>ms
    
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span> 
        <span class="token function">backward</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token function">forward</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">)</span>

    GPIO<span class="token punctuation">.</span><span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>


# <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> 此处开始主函数 <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>
def <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>
    cap<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> interpreter<span class="token punctuation">,</span> input_index<span class="token punctuation">,</span> labels <span class="token operator">=</span> <span class="token function">init_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">while</span> True<span class="token operator">:</span>
        # 开启摄像头
        ret<span class="token punctuation">,</span> frame <span class="token operator">=</span> cap<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token function">fromarray</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span><span class="token function">cvtColor</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2RGB<span class="token punctuation">)</span><span class="token punctuation">)</span>
        image <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span>
        # 模型推测
        top_result <span class="token operator">=</span> <span class="token function">process_image</span><span class="token punctuation">(</span>interpreter<span class="token punctuation">,</span> image<span class="token punctuation">,</span> input_index<span class="token punctuation">)</span>
        # 判断是否检测到猫，标签中是否出现<span class="token string">&quot;cat&quot;</span>
        pedestrian_detected <span class="token operator">=</span> <span class="token function">any</span><span class="token punctuation">(</span>labels<span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token char">&#39;_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;cat&#39;</span> <span class="token keyword">for</span> obj in top_result<span class="token punctuation">)</span>
        
        # 若检测到猫，则判断是否应该喂食
        <span class="token keyword">if</span> pedestrian_detected<span class="token operator">:</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;检测到猫&quot;</span><span class="token punctuation">)</span>
            # 此处根据碗中猫粮高度判断是否要喂食
            distance2 <span class="token operator">=</span> sensor2<span class="token punctuation">.</span>distance <span class="token operator">*</span> <span class="token number">100</span>  # 转换为厘米
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;碗中猫粮高度为：&quot;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">-</span> distance2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;厘米&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> distance2 <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token operator">:</span>
                <span class="token function">dianji</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">else</span><span class="token operator">:</span>
            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;未检测到猫&quot;</span><span class="token punctuation">)</span>

        time<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

        key <span class="token operator">=</span> cv2<span class="token punctuation">.</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token number">27</span><span class="token operator">:</span>  # 按下Esc键退出
            <span class="token keyword">break</span>
    
    cap<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">cv</span><span class="token expression"><span class="token number">2.</span><span class="token function">destroyAllWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token operator">:</span>
    <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function nn(sn,an){const a=o("ExternalLinkIcon");return c(),i("div",null,[n("div",f,[h,g,n("p",null,[n("a",y,[s("手机APP项目仓库链接"),p(a)])])]),w,n("ul",null,[n("li",null,[q,n("p",null,[n("a",x,[s("TareqAlqutami/rtmp-hls-server: 支持 RTMP、HLS 和 DASH 流的视频流服务器的 Docker 映像"),p(a)])])]),n("li",null,[P,n("p",null,[n("a",O,[s("使用 树莓派4b + 官方CSI摄像头 + usb声卡 实现推流直播 - 哔哩哔哩 (bilibili.com)"),p(a)])]),n("p",null,[n("a",S,[s("树莓派FFmpeg与RTMP服务器：直播推流实战教程（一） (baidu.com)"),p(a)])]),n("p",null,[n("a",I,[s("使用树莓派搭建直播平台并推流至B站进行24小时直播（配套文档） - 哔哩哔哩 (bilibili.com)"),p(a)])]),T]),G]),A,n("ul",null,[n("li",null,[C,E,n("p",null,[n("a",M,[s("OneNET - 数据流模型数据交互"),p(a)])]),n("p",null,[n("a",R,[s("OneNET - MQTT设备连接"),p(a)])])]),D,n("li",null,[F,n("p",null,[n("a",N,[s("OneNET - 查询设备数据点"),p(a)])]),n("p",null,[n("a",B,[s("OneNET - 安全鉴权"),p(a)])])])]),H,j,U,z,L,n("p",null,[n("a",Q,[s(" http://t.csdnimg.cn/GMxFo"),p(a)])]),V,n("ul",null,[W,n("li",null,[K,n("p",null,[n("a",$,[s("目标检测  |  TensorFlow Lite"),p(a)])])]),Z]),X,n("p",null,[n("a",J,[s("Baiye959/Cat-Feed (github.com)"),p(a)])]),Y])}const tn=e(_,[["render",nn],["__file","cat_feed.html.vue"]]);export{tn as default};
