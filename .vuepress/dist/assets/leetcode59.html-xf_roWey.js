import{_ as n,o as s,c as a,e as t}from"./app-qc-2f0dK.js";const p="/image/2024-02-27-152618.png",e="/image/2024022702.png",o="/image/2024022703.png",c={},l=t('<h2 id="_59-螺旋矩阵ii" tabindex="-1"><a class="header-anchor" href="#_59-螺旋矩阵ii" aria-hidden="true">#</a> 59. 螺旋矩阵II</h2><p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 <code>n^2</code> 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p><p>示例 1： <img src="'+p+`" alt=""></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：n = 3
输出：[[1,2,3],[8,9,4],[7,6,5]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：n = 1
输出：[[1]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>提示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1 &lt;= n &lt;= 20
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>本题的关键词是模拟和循环不变量。<br> 为了在处理过程中头尾相接更方便，逐层处理、每条边都左闭右开，这样一共处理n/2层，n为奇数时补上最中间那个元素，如下图。 <img src="`+e+'" alt=""><img src="'+o+`" alt=""></p><p>定义每层左上角坐标为<code>(startx, starty)</code>，为方便计算结束位置再设偏移量<code>offset</code>初始值为1、每深一层加2，填入值即为处理过的元素个数cnt。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> startx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> starty <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> offset<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> offset <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> offset <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">,</span> startx<span class="token operator">++</span><span class="token punctuation">,</span> starty<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span> i<span class="token operator">=</span>startx<span class="token punctuation">,</span> j<span class="token operator">=</span>starty<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> startx<span class="token operator">+</span>n<span class="token operator">-</span>offset<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
                ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> startx<span class="token operator">+</span>n<span class="token operator">-</span>offset<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
                ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> j <span class="token operator">&gt;</span> starty<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>
                ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span>i <span class="token operator">&gt;</span> startx<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
                ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> ret<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">;</span> 
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),i=[l];function u(r,k){return s(),a("div",null,i)}const v=n(c,[["render",u],["__file","leetcode59.html.vue"]]);export{v as default};
