import{_ as e,r as t,o as l,c as o,a as n,d as s,b as i,e as c}from"./app-qc-2f0dK.js";const p="/image/2024032602.png",r={},d=n("h2",{id:"_538-把二叉搜索树转换为累加树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_538-把二叉搜索树转换为累加树","aria-hidden":"true"},"#"),s(" 538. 把二叉搜索树转换为累加树")],-1),u=n("p",null,[s("给出二叉 搜索 树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 "),n("code",null,"node"),s(" 的新值等于原树中大于或等于 "),n("code",null,"node.val"),s(" 的值之和。")],-1),v=n("p",null,"提醒一下，二叉搜索树满足下列约束条件：",-1),m=n("li",null,"节点的左子树仅包含键 小于 节点键的节点。",-1),k=n("li",null,"节点的右子树仅包含键 大于 节点键的节点。",-1),b={href:"https://leetcode-cn.com/problems/binary-search-tree-to-greater-sum-tree/",target:"_blank",rel:"noopener noreferrer"},_=c('<p>示例 1： <img src="'+p+`" alt=""></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
输出：[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：root = [0,null,1]
输出：[1,null,1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 3：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：root = [1,0,2]
输出：[3,3,2]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 4：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：root = [3,2,4,1]
输出：[7,9,4,10]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>提示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>树中的节点数介于 0 和 10^4 之间。
每个节点的值介于 -10^4 和 10^4 之间。
树中的所有值 互不相同 。
给定的树为二叉搜索树。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>倒着中序遍历，这样能从大到小遍历节点。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">convertBST</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">// 倒着中序遍历：右-中-左</span>
        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">convertBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum <span class="token operator">+=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>val <span class="token operator">=</span> sum<span class="token punctuation">;</span>
        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">convertBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function h(g,x){const a=t("ExternalLinkIcon");return l(),o("div",null,[d,u,v,n("ul",null,[m,k,n("li",null,[s("左右子树也必须是二叉搜索树。 注意：本题和 "),n("a",b,[s("1038"),i(a)]),s(" 相同")])]),_])}const y=e(r,[["render",h],["__file","leetcode538.html.vue"]]);export{y as default};
