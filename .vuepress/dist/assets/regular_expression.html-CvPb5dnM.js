import{_ as e,r as o,o as c,c as l,a as n,d as s,b as t,e as p}from"./app-6S_5LTOt.js";const u={},i=p(`<h2 id="优雅匹配特殊字符" tabindex="-1"><a class="header-anchor" href="#优雅匹配特殊字符" aria-hidden="true">#</a> 优雅匹配特殊字符</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 去除特殊字符</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">removeSpecialChar</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> regEx <span class="token operator">=</span> <span class="token string">&quot;\\\\pP|\\\\pS|\\\\s+&quot;</span><span class="token punctuation">;</span>
    str <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regEx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> str<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 匹配到特殊字符返回true，否则返回false</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">hasSpecialChar</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> validPattern <span class="token operator">=</span> <span class="token string">&quot;\\\\pP|\\\\pS|\\\\s+&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>validPattern<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中</p><ul><li>\\s+是空格一个或者多个，不管在哪个位置都能匹配</li><li>\\pP 其中的小写 p 是 property 的意思，表示 Unicode 属性，用于 Unicode 正表达式的前缀。</li></ul><p>Unicode 字符集七个字符属性：</p><ul><li>P：标点字符；</li><li>L：字母；</li><li>M：标记符号（一般不会单独出现）；</li><li>Z：分隔符（比如空格、换行等）；</li><li>S：符号（比如数学符号、货币符号等）；</li><li>N：数字（比如阿拉伯数字、罗马数字等）；</li><li>C：其他字符</li></ul><p>七个属性下还有若干个子属性，用于更进一步地进行细分：</p>`,7),k={href:"http://www.unicode.org/reports/tr18/",target:"_blank",rel:"noopener noreferrer"},r={href:"http://www.unicode.org/Public/UNIDATA/UnicodeData.txt",target:"_blank",rel:"noopener noreferrer"},d=p(`<h2 id="列举匹配特殊字符" tabindex="-1"><a class="header-anchor" href="#列举匹配特殊字符" aria-hidden="true">#</a> 列举匹配特殊字符</h2><h3 id="匹配规定格式-符合返回true" tabindex="-1"><a class="header-anchor" href="#匹配规定格式-符合返回true" aria-hidden="true">#</a> 匹配规定格式，符合返回true</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Matcher</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span></span><span class="token punctuation">;</span>

<span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;^[a-zA-Z0-9_]+$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//以账号为例</span>
<span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>账号（只允许字母、数字、下划线）：^[a-zA-Z0-9_]+$</li><li>验证手机号：^((17[0-9])|(14[0-9])|(13[0-9])|(15[0-9])|(16[0-9])|(18[0-9])|(19[0-9]))\\d{8}$</li><li>汉字：^[\\u4e00-\\u9fa5]{0,}$</li><li>Email地址：^\\w+([-+.]\\w+)<em>@\\w+([-.]\\w+)</em>.\\w+([-.]\\w+)*$</li><li>18位身份证的粗略校验：^(\\d{6})(19|20)(\\d{2})(1[0-2]|0[1-9])(0[1-9]|[1-2][0-9]|3[0-1])(\\d{3})(\\d|X|x)?$</li><li>年级（以数字[2-7]或者中文数字[二三四五六七]开头,以年级结尾）：^(([2-7]|[二三四五六七]).?)+年级$</li><li>空白\\回车制\\表符: \\s</li></ul><h3 id="过滤特殊字符" tabindex="-1"><a class="header-anchor" href="#过滤特殊字符" aria-hidden="true">#</a> 过滤特殊字符</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Matcher</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span>

<span class="token comment">// 过滤特殊字符</span>
<span class="token comment">// 只允许字母和数字</span>
<span class="token class-name">String</span> regEx <span class="token operator">=</span> <span class="token string">&quot;[^a-zA-Z0-9]&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 清除掉所有特殊字符</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>&quot;<span class="token punctuation">[</span>\`<span class="token operator">~</span><span class="token operator">!</span>#\\$<span class="token operator">%</span><span class="token operator">^</span><span class="token operator">&amp;</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+=</span><span class="token operator">|</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token char">&#39;Aa:;&#39;</span><span class="token punctuation">,</span>\\\\\\\\<span class="token punctuation">[</span>\\\\\\\\<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token operator">/</span><span class="token operator">?</span><span class="token operator">~</span>！@#￥<span class="token operator">%</span>……<span class="token operator">&amp;</span><span class="token operator">*</span>（）<span class="token number">9</span>——<span class="token operator">+</span><span class="token operator">|</span><span class="token punctuation">{</span><span class="token punctuation">}</span>【】\\\\&quot;‘；：”“’。，、？<span class="token punctuation">]</span><span class="token string">&quot;&quot;</span>&quot;
<span class="token class-name">Pattern</span>  p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regEx<span class="token punctuation">)</span>
<span class="token class-name">Matcher</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见情景" tabindex="-1"><a class="header-anchor" href="#常见情景" aria-hidden="true">#</a> 常见情景</h2><h3 id="_18位身份证的严格验证-含真实性校验" tabindex="-1"><a class="header-anchor" href="#_18位身份证的严格验证-含真实性校验" aria-hidden="true">#</a> 18位身份证的严格验证（含真实性校验）</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">is18ByteIdCardComplex</span><span class="token punctuation">(</span><span class="token class-name">String</span> idCard<span class="token punctuation">)</span><span class="token punctuation">{</span>  
    <span class="token class-name">Pattern</span> pattern1 <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&quot;^(\\\\d{6})(19|20)(\\\\d{2})(1[0-2]|0[1-9])(0[1-9]|[1-2][0-9]|3[0-1])(\\\\d{3})(\\\\d|X|x)?$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern1<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>idCard<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prefix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> suffix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  
    <span class="token keyword">if</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cityMap <span class="token operator">=</span> <span class="token function">initCityMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">if</span><span class="token punctuation">(</span>cityMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>idCard<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>  
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">int</span> idCardWiSum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//用来保存前17位各自乖以加权因子后的总和  </span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">17</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
            idCardWiSum<span class="token operator">+=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>idCard<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>prefix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
          
        <span class="token keyword">int</span> idCardMod<span class="token operator">=</span>idCardWiSum<span class="token operator">%</span><span class="token number">11</span><span class="token punctuation">;</span><span class="token comment">//计算出校验码所在数组的位置  </span>
        <span class="token class-name">String</span> idCardLast<span class="token operator">=</span>idCard<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到最后一位身份证号码  </span>
          
        <span class="token comment">//如果等于2，则说明校验码是10，身份证号码最后一位应该是X  </span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>idCardMod<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
            <span class="token keyword">if</span><span class="token punctuation">(</span>idCardLast<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  
            <span class="token comment">//用计算出的验证码与最后一位身份证号码匹配，如果一致，说明通过，否则是无效的身份证号码  </span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>idCardLast<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>suffix<span class="token punctuation">[</span>idCardMod<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  
            <span class="token punctuation">}</span>  
       <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="java自带注解验证手机号-pattern-valid-仅记录-未使用过" tabindex="-1"><a class="header-anchor" href="#java自带注解验证手机号-pattern-valid-仅记录-未使用过" aria-hidden="true">#</a> Java自带注解验证手机号 @Pattern + @Valid（仅记录，未使用过）</h3><p><code>controller</code>处需要加上<code>@Valid</code>注解，不然不会抛异常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Pattern</span><span class="token punctuation">(</span>regexp <span class="token operator">=</span> <span class="token string">&quot;^((17[0-9])|(14[0-9])|(13[0-9])|(15[0-9])|(16[0-9])|(18[0-9])|(19[0-9]))\\\\d{8}$&quot;</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;id不正确&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> keyWord<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取字符串中所有匹配的内容" tabindex="-1"><a class="header-anchor" href="#获取字符串中所有匹配的内容" aria-hidden="true">#</a> 获取字符串中所有匹配的内容</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;select * from order where createdUser = \${currentUser} and  depart = \${currentOrg} and status = &#39;VALID&#39;&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> reg <span class="token operator">=</span> <span class="token string">&quot;\\\\$\\\\{[a-zA-Z0-9]+\\\\}&quot;</span><span class="token punctuation">;</span><span class="token comment">//定义正则表达式</span>

<span class="token class-name">Pattern</span> patten <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//编译正则表达式</span>
<span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> patten<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 指定要匹配的字符串</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> matchStrs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//此处find（）每次被调用后，会偏移到下一个匹配</span>
   matchStrs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前匹配的值</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matchStrs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matchStrs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function m(v,b){const a=o("ExternalLinkIcon");return c(),l("div",null,[i,n("ul",null,[n("li",null,[n("a",k,[s("Unicode 正则表达式标准"),t(a)]),s("（可以找到所有的子属性）")]),n("li",null,[n("a",r,[s("各 Unicode 字符属性的定义，可以用来看看某个字符具有什么属性"),t(a)]),s("（这个文本文档一行对应一个字符，第一列是 Unicode 编码，第二列是字符名，第三列是 Unicode 属性，以及其他一些字符信息。）")])]),d])}const g=e(u,[["render",m],["__file","regular_expression.html.vue"]]);export{g as default};
